<style>
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    @keyframes slideIn {
        from { transform: translateX(-20px); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }

    @keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(30px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    .best-seller-card {
        animation: fadeIn 0.6s ease-out forwards;
    }

    .product-item, .category-item {
        animation: slideInRight 0.5s ease-out forwards;
        opacity: 0;
    }

    .best-seller-card:hover {
        transform: translateY(-5px);
        transition: transform 0.3s ease;
    }

    .product-item:hover, .category-item:hover {
        background-color: rgba(59, 130, 246, 0.05);
        transform: translateX(5px);
        transition: all 0.3s ease;
    }

    .stat-card {
        animation: fadeIn 0.5s ease-out forwards;
        transition: all 0.3s ease;
        background: linear-gradient(145deg, #ffffff, #f3f4f6);
    }

    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }

    .icon-wrapper {
        transition: all 0.3s ease;
    }

    .stat-card:hover .icon-wrapper {
        transform: scale(1.1);
    }

    .table-row {
        transition: all 0.2s ease;
    }

    .table-row:hover {
        background-color: rgba(59, 130, 246, 0.05);
    }

    .btn-primary {
        transition: all 0.3s ease;
        background: linear-gradient(145deg, #3b82f6, #2563eb);
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.2);
    }

    .report-section {
        animation: slideIn 0.5s ease-out forwards;
    }
</style>

<div class="flex min-h-screen min-w-screen bg-gray-100">
    <!-- Sidebar -->
    <%-include('../partials/admin/side bar')%>
    
    <!-- Main Content -->
    <div class="flex-1 p-8">
        <!-- Header -->
        <%-include('../partials/admin/header')%>
        
        <!-- Statistics Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
            <div class="stat-card rounded-xl p-6 shadow-sm" style="animation-delay: 0.1s">
                <div class="flex items-center justify-between mb-4">
                    <div>
                        <h3 class="text-lg font-semibold text-gray-800">Total Revenue</h3>
                        <p class="text-sm text-gray-500">Overall earnings</p>
                    </div>
                    <div class="icon-wrapper p-3 bg-blue-100 rounded-lg">
                        <i class="fas fa-money-bill-wave text-blue-600 text-xl"></i>
                    </div>
                </div>
                <div class="text-3xl font-bold text-gray-800">₹ <%= totalRevenue.toFixed(2) %></div>
            </div>

            <div class="stat-card rounded-xl p-6 shadow-sm" style="animation-delay: 0.2s">
                <div class="flex items-center justify-between mb-4">
                    <div>
                        <h3 class="text-lg font-semibold text-gray-800">Total Sales</h3>
                        <p class="text-sm text-gray-500">Number of orders</p>
                    </div>
                    <div class="icon-wrapper p-3 bg-green-100 rounded-lg">
                        <i class="fas fa-shopping-cart text-green-600 text-xl"></i>
                    </div>
                </div>
                <div class="text-3xl font-bold text-gray-800"><%= totalSales %></div>
            </div>

            <div class="stat-card rounded-xl p-6 shadow-sm" style="animation-delay: 0.3s">
                <div class="flex items-center justify-between mb-4">
                    <div>
                        <h3 class="text-lg font-semibold text-gray-800">Total Discounts</h3>
                        <p class="text-sm text-gray-500">Savings provided</p>
                    </div>
                    <div class="icon-wrapper p-3 bg-purple-100 rounded-lg">
                        <i class="fas fa-tags text-purple-600 text-xl"></i>
                    </div>
                </div>
                <div class="text-3xl font-bold text-gray-800">₹ <%= totalDiscount.toFixed(2) %></div>
            </div>
        </div>

        <!-- Sales Report Section -->
        <div class="report-section bg-white rounded-xl shadow-sm overflow-hidden mb-8">
            <div class="p-6 border-b">
                <div class="flex flex-col md:flex-row md:items-center justify-between mb-6">
                    <div>
                        <h2 class="text-2xl font-bold text-gray-800">Sales Report</h2>
                        <p class="text-gray-500 mt-1">Analyze your sales data</p>
                    </div>
                </div>

                <!-- Chart -->
                <div class="bg-white rounded-xl shadow-sm p-6 mb-8">
                    <div class="flex flex-col md:flex-row md:items-center justify-between mb-6">
                        <h2 class="text-2xl font-bold text-gray-800">Sales Analytics</h2>
                        <div class="flex gap-4">
                            <select id="chartPeriod" class="rounded-lg border-gray-300">
                                <option value="weekly">Weekly</option>
                                <option value="monthly">Monthly</option>
                                <option value="yearly">Yearly</option>
                            </select>
                        </div>
                    </div>
                    <div class="h-[400px]">
                        <canvas id="salesChart"></canvas>
                    </div>
                </div>
                
                <!-- Download Options -->
                <div class="flex gap-4 justify-end">
                    <button id="downloadPDF" class="flex items-center px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-all">
                        <i class="fas fa-file-pdf mr-2"></i>PDF
                    </button>
                    <button id="downloadExcel" class="flex items-center px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-all">
                        <i class="fas fa-file-excel mr-2"></i>Excel
                    </button>
                </div>

                <!-- Filter Options -->
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Report Type</label>
                        <select id="reportType" class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all">
                            <option value="all">All Time</option>
                            <option value="today">Today</option>
                            <option value="yesterday">Yesterday</option>
                            <option value="thisWeek">This Week</option>
                            <option value="thisMonth">This Month</option>
                            <option value="specificDate">Specific Date</option>
                            <option value="customRange">Custom Range</option>
                        </select>
                    </div>

                    <div id="specificDateContainer" style="display: none;">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Select Date</label>
                        <input type="date" id="specificDate" class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all">
                    </div>

                    <div id="dateRangeContainer" style="display: none;" class="col-span-3">
                        <div class="grid grid-cols-3 gap-4 items-end">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
                                <input type="date" id="startDate" class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">End Date</label>
                                <input type="date" id="endDate" class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all">
                            </div>
                            <div class="flex items-end">
                                <button id="generateReport" class="w-full btn-primary px-6 py-2 text-white rounded-lg font-medium">
                                    Generate Report
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sales Report Table -->
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Order ID</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Products</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Discount</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Final Amount</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        <% salesReport.forEach((sale,index)=>{ %>
                            <tr class="table-row" style="animation: fadeIn 0.5s ease-out forwards; animation-delay: 0.1s">
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900"><%= sale.orderId %></td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"><%= sale.date %></td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900"><%= sale.customerName %></td>
                                <td class="px-6 py-4 text-sm text-gray-500">
                                    <div class="text-sm text-gray-900"><%= sale.products[0] %></div>
                                    <% if (sale.products.length > 1) { %>
                                        <div class="text-xs text-gray-500">+ <%= sale.products.length - 1 %> more products</div>
                                    <% } %> 
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">₹ <%= sale.amount.toFixed(2) %></td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-red-500">₹ <%= sale.totalDiscountAmount ? sale.totalDiscountAmount.toFixed(2) : 0 %></td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-green-600">₹ <%= sale.finalAmount.toFixed(2) %></td>
                            </tr>
                        <% }) %>
                    </tbody>
                    <tfoot class="bg-gray-50 font-medium">
                        <tr>
                            <td colspan="4" class="px-6 py-4 text-sm text-gray-900 text-right">Totals:</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">₹ <%= totalAmount.toFixed(2) %></td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-red-500">₹ <%= totalDiscountAmount.toFixed(2) %></td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-green-600">₹ <%= totalFinalAmount.toFixed(2) %></td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
        <!-- Best Sellers Section -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
            <!-- Best Selling Products -->
            <div class="bg-white rounded-xl shadow-sm overflow-hidden best-seller-card">
                <div class="p-6 border-b">
                    <h2 class="text-2xl font-bold text-gray-800">Best Selling Products</h2>
                    <p class="text-gray-600 mt-1">Top <%= topProducts.length %> products by sales volume</p>
                </div>
                <div class="p-6">
                    <ul class="space-y-4">
                        <% topProducts.forEach((product, index) => { %>
                            <li class="flex items-center justify-between product-item" 
                                style="animation-delay: '<%= index * 100 %>'ms">
                                <div class="flex items-center space-x-4">
                                    <div class="flex-shrink-0 w-8 h-8 flex items-center justify-center bg-blue-100 text-blue-600 rounded-full">
                                        <%= index + 1 %>
                                    </div>
                                    <div>
                                        <h3 class="font-medium text-gray-900"><%= product.name || product._id %></h3>
                                        <p class="text-sm text-gray-500">Sold: <%= product.totalSold %> units</p>
                                    </div>
                                </div>
                                <div class="text-blue-600">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                                    </svg>
                                </div>
                            </li>
                        <% }); %>
                    </ul>
                </div>
            </div>

            <!-- Best Selling Categories -->
            <div class="bg-white rounded-xl shadow-sm overflow-hidden best-seller-card">
                <div class="p-6 border-b">
                    <h2 class="text-2xl font-bold text-gray-800">Top Categories</h2>
                    <p class="text-gray-600 mt-1">Top <%= topCategories.length %> categories by sales volume</p>
                </div>
                <div class="p-6">
                    <ul class="space-y-4">
                        <% topCategories.forEach((category, index) => { %>
                            <li class="flex items-center justify-between category-item"
                                style="animation-delay: '<%= index * 100 %>'ms">
                                <div class="flex items-center space-x-4">
                                    <div class="flex-shrink-0 w-8 h-8 flex items-center justify-center bg-purple-100 text-purple-600 rounded-full">
                                        <%= index + 1 %>
                                    </div>
                                    <div>
                                        <h3 class="font-medium text-gray-900"><%= category.name %></h3>
                                        <p class="text-sm text-gray-500">Sold: <%= category.totalSold %> units</p>
                                    </div>
                                </div>
                                <div class="text-purple-600">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                                    </svg>
                                </div>
                            </li>
                        <% }); %>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const reportType = document.getElementById('reportType');
        const specificDateContainer = document.getElementById('specificDateContainer');
        const dateRangeContainer = document.getElementById('dateRangeContainer');
        const specificDate = document.getElementById('specificDate');
        const startDate = document.getElementById('startDate');
        const endDate = document.getElementById('endDate');
        const generateReport = document.getElementById('generateReport');

        // Function to format date as YYYY-MM-DD for input fields
        function formatDate(date) {
            return date.toISOString().split('T')[0];
        }

        // Function to get current filter parameters
        function getCurrentFilterParams() {
            const type = reportType.value;
            const params = new URLSearchParams();
            params.append('type', type);
            
            if (type === 'specificDate') {
                params.append('date', specificDate.value);
            } else if (type === 'customRange') {
                params.append('startDate', startDate.value);
                params.append('endDate', endDate.value);
            }
            
            return params;
        }

        // Handle PDF download
        document.getElementById('downloadPDF').addEventListener('click', function() {
            const params = getCurrentFilterParams();
            params.append('format', 'pdf');
            window.location.href = `/admin/download-sales-report?${params.toString()}`;
        });

        // Handle Excel download
        document.getElementById('downloadExcel').addEventListener('click', function() {
            const params = getCurrentFilterParams();
            params.append('format', 'excel');
            window.location.href = `/admin/download-sales-report?${params.toString()}`;
        });

        // Function to set default dates based on report type
        function setDefaultDates(type) {
            const today = new Date();
            
            switch(type) {
                case 'today':
                    fetchSalesReport(type);
                    break;

                case 'yesterday':
                    fetchSalesReport(type);
                    break;

                case 'thisWeek':
                    const weekStart = new Date(today);
                    weekStart.setDate(today.getDate() - today.getDay()); // Start of week (Sunday)
                    startDate.value = formatDate(weekStart);
                    endDate.value = formatDate(today);
                    fetchSalesReport(type);
                    break;

                case 'thisMonth':
                    const monthStart = new Date(today.getFullYear(), today.getMonth(), 1);
                    startDate.value = formatDate(monthStart);
                    endDate.value = formatDate(today);
                    fetchSalesReport(type);
                    break;

                case 'specificDate':
                    specificDate.value = formatDate(today);
                    break;

                case 'customRange':
                    // Set last 30 days as default range
                    const thirtyDaysAgo = new Date(today);
                    thirtyDaysAgo.setDate(today.getDate() - 30);
                    startDate.value = formatDate(thirtyDaysAgo);
                    endDate.value = formatDate(today);
                    break;

                default: // 'all'
                    fetchSalesReport(type);
                    break;
            }
        }

        // Function to show toast notification
        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg transform transition-all duration-300 ease-in-out z-50 ${
                type === 'success' 
                    ? 'bg-green-500 text-white' 
                    : 'bg-red-500 text-white'
            }`;
            toast.style.opacity = '0';
            toast.style.transform = 'translateY(-20px)';
            
            // Add icon based on type
            const icon = type === 'success' ? '✓' : '⚠';
            toast.innerHTML = `
                <div class="flex items-center space-x-2">
                    <span class="text-lg font-bold">${icon}</span>
                    <p class="font-medium">${message}</p>
                </div>
            `;
            
            document.body.appendChild(toast);
            
            // Animate in
            setTimeout(() => {
                toast.style.opacity = '1';
                toast.style.transform = 'translateY(0)';
            }, 10);
            
            // Animate out after 3 seconds
            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transform = 'translateY(-20px)';
                setTimeout(() => {
                    document.body.removeChild(toast);
                }, 300);
            }, 3000);
        }

        // Handle report type changes
        reportType.addEventListener('change', function() {
            // Hide all date inputs first
            specificDateContainer.style.display = 'none';
            dateRangeContainer.style.display = 'none';

            // Show relevant inputs based on selection
            if (this.value === 'specificDate') {
                specificDateContainer.style.display = 'block';
                setDefaultDates(this.value);
            } else if (this.value === 'customRange') {
                dateRangeContainer.style.display = 'block';
                setDefaultDates(this.value);
            } else {
                // For other options, fetch data immediately
                fetchSalesReport(this.value);
            }
        });

        // Handle specific date change
        specificDate.addEventListener('change', function() {
            fetchSalesReport('specificDate', { date: this.value });
        });

        // Handle custom range generate button
        generateReport.addEventListener('click', function() {
            if (startDate.value && endDate.value) {
                fetchSalesReport('customRange', {
                    startDate: startDate.value,
                    endDate: endDate.value
                });
            } else {
                showToast('Please select both start and end dates', 'error');
            }
        });

        setDefaultDates(reportType.value);

        // Function to fetch sales report data
        async function fetchSalesReport(type, dates = {}) {
            try {
                const params = new URLSearchParams();
                params.append('type', type);
                
                if (dates.date) params.append('date', dates.date);
                if (dates.startDate) params.append('startDate', dates.startDate);
                if (dates.endDate) params.append('endDate', dates.endDate);

                console.log('Fetching report with params:', Object.fromEntries(params));

                const response = await axios.get(`/admin/generate-sales-report?${params.toString()}`);
                console.log('Axios response:', response.data);

                if (response.data && response.data.salesReport) {
                    updateSalesTable(response.data.salesReport);
                    showToast('Report updated successfully', 'success');
                } else {
                    throw new Error('Invalid data format received');
                }
            } catch (error) {
                console.error('Axios error:', error);
                showToast(error.response?.data?.message || error.message || 'Failed to fetch report', 'error');
                updateSalesTable([]); // Clear the table or show empty state
            }
        }

        // Function to update the sales table
        function updateSalesTable(salesReport) {
            const tbody = document.querySelector('table tbody');
            tbody.innerHTML = salesReport.map(sale => `
                <tr class="table-row" style="animation: fadeIn 0.5s ease-out forwards;">
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${sale.orderId}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${sale.date}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${sale.customerName}</td>
                    <td class="px-6 py-4">
                        <div class="text-sm text-gray-900">${sale.products[0]}</div>
                        ${sale.products.length > 1 ? `<div class="text-xs text-gray-500">+ ${sale.products.length - 1} more products</div>` : ''}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">₹ ${sale.amount.toFixed(2)}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-red-500">₹ ${sale.discount.toFixed(2)}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-green-600">₹ ${sale.finalAmount.toFixed(2)}</td>
                </tr>
            `).join('');
        }

        // Chart
        const ctx = document.getElementById('salesChart').getContext('2d');
        const salesChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: [], // Will be populated with dates
                datasets: [{
                    label: 'Orders',
                    data: [], // Will be populated with order counts
                    backgroundColor: 'rgba(59, 130, 246, 0.5)', // Blue with opacity
                    borderColor: 'rgb(59, 130, 246)',
                    borderWidth: 1,
                    yAxisID: 'y', // This will use the left y-axis
                    order: 2
                }, {
                    label: 'Revenue',
                    data: [], // Will be populated with revenue
                    type: 'line',
                    borderColor: 'rgb(16, 185, 129)', // Green
                    borderWidth: 2,
                    fill: false,
                    yAxisID: 'y1', // This will use the right y-axis
                    order: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    intersect: false,
                    mode: 'index'
                },
                scales: {
                    y: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        title: {
                            display: true,
                            text: 'Number of Orders'
                        },
                        // Start from 0 and adjust max based on data
                        beginAtZero: true,
                        grid: {
                            drawOnChartArea: true
                        }
                    },
                    y1: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        title: {
                            display: true,
                            text: 'Revenue (₹)'
                        },
                        // Start from 0 and adjust max based on data
                        beginAtZero: true,
                        grid: {
                            drawOnChartArea: false // Only show grid lines for left axis
                        }
                    }
                },
                plugins: {
                    title: {
                        display: true,
                        text: 'Sales Performance'
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                let label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                if (context.dataset.yAxisID === 'y1') {
                                    // Format revenue with ₹ symbol and thousands separator
                                    label += '₹' + context.parsed.y.toLocaleString();
                                } else {
                                    // Format order count
                                    label += context.parsed.y;
                                }
                                return label;
                            }
                        }
                    }
                }
            }
        });
        
        // Function to update chart data
        async function updateChartData(period) {
            try {
                const response = await axios.get(`/admin/analytics/${period}`);
                const data = response.data;
                salesChart.data.labels = data.labels;
                salesChart.data.datasets[0].data = data.orders;
                salesChart.data.datasets[1].data = data.revenue;
                salesChart.update();
            } catch (error) {
                console.error('Error fetching chart data:', error);
            }
        }
        
        // Add event listener for period change
        document.getElementById('chartPeriod').addEventListener('change', (e) => {
            updateChartData(e.target.value);
        });
        
        // Initial chart data load
        updateChartData('weekly');
    });
</script>