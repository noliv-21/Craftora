<style>
    .toast_style {
        width: fit-content;
        max-width: 300px;
        border-radius: 8px;
        padding: 12px 20px;
        border: 1px solid rgba(255, 0, 0, 0.3);
        font-family: Arial, sans-serif;
        font-size: 16px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        position: absolute;
        top: 20px;
        right: 20px;
        z-index: 100;
    }
</style>
<div class="flex">
    <!-- Sidebar -->
    <%- include('../../partials/admin/side bar') %>

        <!-- Main Content -->
        <div class="flex-1 p-6">
            <!-- Header -->
            <%- include('../../partials/admin/header') %>

                <!-- Coupon Management Section -->
                <div class="w-full px-4 py-6 sm:px-6 lg:px-8">
                    <!-- Header section -->
                    <div
                        class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 space-y-4 sm:space-y-0">
                        <h1 class="text-2xl font-semibold text-gray-900">Coupon Management</h1>
                        <button onclick="openModal('add')"
                            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            <i class="fas fa-plus mr-2"></i>
                            Add New Coupon
                        </button>
                    </div>

                    <!-- Search and filter section -->
                    <div class="w-full bg-white rounded-lg shadow mb-6">
                        <div class="p-4 sm:p-6">
                            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                                <!-- Search input -->
                                <div class="col-span-1">
                                    <label class="block text-sm font-medium text-gray-700">Search Coupons</label>
                                    <input type="text"
                                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                        placeholder="Search by name or code">
                                </div>
                                <!-- Add more filters as needed -->
                            </div>
                        </div>
                    </div>

                    <!-- Coupons list -->
                    <div class="w-full bg-white rounded-lg shadow overflow-hidden">
                        <div class="overflow-x-auto">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th scope="col"
                                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                                            Image</th>
                                        <th scope="col"
                                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                                            Name</th>
                                        <th scope="col"
                                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                                            Code</th>
                                        <th scope="col"
                                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                                            Discount</th>
                                        <th scope="col"
                                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                                            Status</th>
                                        <th scope="col"
                                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                                            Expiry</th>
                                        <th scope="col"
                                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                                            Actions</th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-200">
                                    <% coupons.forEach(coupon=> { %>
                                        <tr data-coupon-id="<%= coupon._id %>" data-name="<%= coupon.name %>"
                                            data-code="<%= coupon.couponCode %>"
                                            data-description="<%= coupon.description %>"
                                            data-discount-type="<%= coupon.discountType %>"
                                            data-discount-value="<%= coupon.discountValue %>"
                                            data-min-amount="<%= coupon.minAmount %>"
                                            data-max-amount="<%= coupon.maxAmount %>"
                                            data-total-limit="<%= coupon.totalLimit %>"
                                            data-per-user-limit="<%= coupon.perUserLimit %>"
                                            data-expiry="<%= coupon.expiryDate %>" data-image="<%= coupon.image %>">
                                            <td class="px-6 py-4 whitespace-nowrap">
                                                <div class="flex-shrink-0 h-10 w-10">
                                                    <img class="h-10 w-10 rounded-full object-cover"
                                                        src="<%= coupon.image ? `/uploads/coupons/${coupon.image}` : '/images/default-coupon.png' %>"
                                                        alt="<%= coupon.name %>">
                                                </div>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap">
                                                <div class="text-sm font-medium text-gray-900">
                                                    <%= coupon.name %>
                                                </div>
                                                <div class="text-sm text-gray-500">
                                                    <%= coupon.description %>
                                                </div>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                <%= coupon.couponCode %>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap">
                                                <div class="text-sm text-gray-900">
                                                    <%= coupon.discountType==='PERCENTAGE' ? `${coupon.discountValue}%`
                                                        : `₹${coupon.discountValue}` %>
                                                </div>
                                                <div class="text-xs text-gray-500">
                                                    Min: ₹<%= coupon.minAmount %> | Max: <%= coupon.maxAmount ?
                                                            `₹${coupon.maxAmount}` : 'N/A' %>
                                                </div>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap">
                                                <span id="status-<%= coupon._id %>"
                                                    class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full <%= coupon.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' %>">
                                                    <%= coupon.isActive ? 'Active' : 'Inactive' %>
                                                </span>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                <%= new Date(coupon.expiryDate).toLocaleDateString() %>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                                                <button onclick="editCoupon('<%= coupon._id %>')"
                                                    class="text-indigo-600 hover:text-indigo-900">Edit</button>
                                                <button id="toggle-<%= coupon._id %>"
                                                    onclick="toggleCouponStatus('<%= coupon._id %>', '<%= coupon.isActive %>')"
                                                    class="text-<%= coupon.isActive ? 'red' : 'green' %>-600 hover:text-<%= coupon.isActive ? 'red' : 'green' %>-800"
                                                    title="<%= coupon.isActive ? 'Deactivate' : 'Activate' %>">
                                                    <i
                                                        class="fas fa-toggle-<%= coupon.isActive ? 'on' : 'off' %> text-xl"></i>
                                                </button>
                                            </td>
                                        </tr>
                                        <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Pagination -->
                    <div
                        class="w-full bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
                        <div class="flex-1 flex justify-between sm:hidden">
                            <% if (page> 1) { %>
                                <a href="?page=<%= page - 1 %>"
                                    class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">Previous</a>
                                <% } %>
                                    <% if (page * limit < totalOrders) { %>
                                        <a href="?page=<%= page + 1 %>"
                                            class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">Next</a>
                                        <% } %>
                        </div>
                        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                            <div>
                                <p class="text-sm text-gray-700">
                                    Showing <span class="font-medium">
                                        <%= (page - 1) * limit + 1 %>
                                    </span> to <span class="font-medium">
                                        <%= Math.min(page * limit, totalOrders) %>
                                    </span> of <span class="font-medium">
                                        <%= totalOrders %>
                                    </span> results
                                </p>
                            </div>
                            <div>
                                <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px"
                                    aria-label="Pagination">
                                    <% if (page> 1) { %>
                                        <a href="?page=<%= page - 1 %>"
                                            class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                            <span class="sr-only">Previous</span>
                                            <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"
                                                fill="currentColor" aria-hidden="true">
                                                <path fill-rule="evenodd"
                                                    d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
                                                    clip-rule="evenodd" />
                                            </svg>
                                        </a>
                                        <% } %>
                                            <% if (page * limit < totalOrders) { %>
                                                <a href="?page=<%= page + 1 %>"
                                                    class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                                    <span class="sr-only">Next</span>
                                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg"
                                                        viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                        <path fill-rule="evenodd"
                                                            d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                                                            clip-rule="evenodd" />
                                                    </svg>
                                                </a>
                                                <% } %>
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modal -->
                <div id="couponModal" class="fixed inset-0 z-50 hidden overflow-y-auto">
                    <div class="flex items-center justify-center min-h-screen px-4">
                        <!-- Overlay -->
                        <div class="fixed inset-0 bg-black opacity-50"></div>

                        <!-- Modal content -->
                        <div class="relative bg-white rounded-lg shadow-xl w-full max-w-2xl">
                            <!-- Modal header -->
                            <div class="flex items-center justify-between p-4 border-b">
                                <h3 class="text-xl font-semibold text-gray-900" id="modalTitle">Add New Coupon</h3>
                                <button type="button" onclick="closeModal()"
                                    class="text-gray-600 hover:text-gray-900 focus:outline-none">
                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </button>
                            </div>

                            <!-- Modal body -->
                            <div class="p-6">
                                <form id="couponForm" class="space-y-4" onsubmit="return submitForm(event)"
                                    enctype="multipart/form-data">
                                    <input type="hidden" id="couponId">
                                    <input type="hidden" id="croppedImageData">

                                    <!-- Two column layout -->
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <!-- Left column -->
                                        <div class="space-y-4">
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Name <span
                                                        class="text-red-500">*</span></label>
                                                <input type="text" id="couponName" required minlength="3" maxlength="50"
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                                    onkeyup="validateInput(this, 3, 50, 'Coupon name')">
                                                <p class="mt-1 text-sm text-red-500 hidden" id="couponNameError"></p>
                                            </div>

                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Code <span
                                                        class="text-red-500">*</span></label>
                                                <div class="flex space-x-2">
                                                    <input type="text" id="couponCode" required
                                                        pattern="^[A-Z0-9]{6,12}$"
                                                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                                        oninput="this.value = this.value.toUpperCase()">
                                                    <button type="button" onclick="generateCouponCode()"
                                                        class="mt-1 px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200">
                                                        Generate
                                                    </button>
                                                </div>
                                                <div id="codeAvailabilityStatus" class="mt-1 text-sm"></div>
                                                <p id="codeValidationMessage" class="mt-1 text-sm"></p>
                                            </div>

                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Description <span
                                                        class="text-red-500">*</span></label>
                                                <textarea id="description" rows="2" required minlength="10"
                                                    maxlength="200"
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                                    onkeyup="validateInput(this, 10, 200, 'Description')"></textarea>
                                                <p class="mt-1 text-sm text-red-500 hidden" id="descriptionError"></p>
                                            </div>

                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Discount Type <span
                                                        class="text-red-500">*</span></label>
                                                <select id="discountType" required onchange="handleDiscountTypeChange(this)"
                                                    class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                                                    <option value="percentage">Percentage</option>
                                                    <option value="fixed">Fixed Amount</option>
                                                </select>
                                            </div>

                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Discount Value <span
                                                        class="text-red-500">*</span></label>
                                                <input type="number" id="discountValue" required min="0" step="1"
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                                    onchange="validateDiscountValue(this)">
                                                <p class="mt-1 text-sm text-red-500 hidden" id="discountValueError"></p>
                                            </div>

                                            <div id="maxDiscountDiv">
                                                <label class="block text-sm font-medium text-gray-700">Maximum Discount <span
                                                        class="text-red-500">*</span></label>
                                                <input type="number" id="maxDiscount" required min="0" step="1"
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                                    onchange="validateMaxDiscount(this)">
                                                <p class="mt-1 text-sm text-red-500 hidden" id="maxDiscountError"></p>
                                            </div>
                                        </div>

                                        <!-- Right column -->
                                        <div class="space-y-4">
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Minimum Amount
                                                    <span class="text-red-500">*</span></label>
                                                <input type="number" id="minAmount" required min="0" step="1"
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                                    onchange="validateAmount(this, 'minAmount')">
                                                <p class="mt-1 text-sm text-red-500 hidden" id="minAmountError"></p>
                                            </div>

                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Total Usage Limit
                                                    <span class="text-red-500">*</span></label>
                                                <input type="number" id="totalLimit" required min="1" step="1"
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                                    onchange="validateLimit(this, 'total')">
                                                <p class="mt-1 text-sm text-red-500 hidden" id="totalLimitError"></p>
                                            </div>

                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Per User Limit
                                                    <span class="text-red-500">*</span></label>
                                                <input type="number" id="perUserLimit" required min="1" step="1"
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                                    onchange="validateLimit(this, 'perUser')">
                                                <p class="mt-1 text-sm text-red-500 hidden" id="perUserLimitError"></p>
                                            </div>

                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Expiry Date &
                                                    Time <span class="text-red-500">*</span></label>
                                                <input type="datetime-local" id="expiryDate" required
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                                    onchange="validateExpiryDate(this)">
                                                <p class="mt-1 text-sm text-red-500 hidden" id="expiryDateError"></p>
                                            </div>

                                            <!-- Image upload section -->
                                            <div class="mb-4">
                                                <label class="block text-sm font-medium text-gray-700">Coupon Image
                                                    <span class="text-red-500">*</span></label>
                                                <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md relative"
                                                    id="dropZone" ondrop="handleDrop(event)"
                                                    ondragover="handleDragOver(event)"
                                                    ondragleave="handleDragLeave(event)">
                                                    <div class="space-y-1 text-center">
                                                        <svg class="mx-auto h-12 w-12 text-gray-400"
                                                            stroke="currentColor" fill="none" viewBox="0 0 48 48">
                                                            <path
                                                                d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                                                                stroke-width="2" stroke-linecap="round"
                                                                stroke-linejoin="round" />
                                                        </svg>
                                                        <div class="flex text-sm text-gray-600">
                                                            <label for="imageInput"
                                                                class="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none">
                                                                <span>Upload a file</span>
                                                                <input id="imageInput" name="image" type="file"
                                                                    class="sr-only" accept="image/*"
                                                                    onchange="validateAndHandleImage(this)">
                                                            </label>
                                                            <p class="pl-1">or drag and drop</p>
                                                        </div>
                                                        <p class="text-xs text-gray-500">PNG, JPG, GIF up to 5MB</p>
                                                    </div>
                                                </div>
                                                <p id="imageError" class="mt-1 text-sm text-red-600 hidden"></p>
                                            </div>

                                            <!-- Cropper container -->
                                            <div id="cropperContainer" class="hidden">
                                                <div class="relative" style="max-height: 400px;">
                                                    <img id="cropperImage" class="max-w-full" src="">
                                                </div>
                                                <div class="mt-3 flex justify-end space-x-3">
                                                    <button type="button" onclick="cancelCrop()"
                                                        class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                                                        Cancel
                                                    </button>
                                                    <button type="button" onclick="saveCroppedImage()"
                                                        class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                                                        Save Crop
                                                    </button>
                                                </div>
                                            </div>

                                            <!-- Preview container -->
                                            <div id="imagePreviewContainer" class="mt-4 hidden">
                                                <div class="relative inline-block">
                                                    <img id="imagePreview" class="max-w-xs rounded-lg shadow-md"
                                                        style="max-height: 200px;">
                                                    <button type="button" onclick="resetImage()"
                                                        class="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600">
                                                        <svg class="w-4 h-4" fill="none" stroke="currentColor"
                                                            viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round"
                                                                stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                                        </svg>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Cropper container -->
                                    <div id="cropperContainer" class="hidden mt-4"
                                        style="max-height: 500px; overflow: hidden;">
                                        <div class="relative" style="max-height: 400px;">
                                            <img id="cropperImage" src="" alt="Image to crop"
                                                style="max-width: 100%; max-height: 400px;">
                                        </div>
                                        <div class="mt-4 flex justify-end space-x-2">
                                            <button type="button" onclick="cancelCrop()"
                                                class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                                                Cancel
                                            </button>
                                            <button type="button" onclick="cropImage()"
                                                class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700">
                                                Save Image
                                            </button>
                                        </div>
                                    </div>
                                </form>
                            </div>

                            <!-- Modal footer -->
                            <div class="flex items-center justify-end p-4 border-t">
                                <button type="button" onclick="closeModal()"
                                    class="mr-3 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                                    Cancel
                                </button>
                                <button type="submit" form="couponForm"
                                    class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700">
                                    Save Coupon
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Function to show image preview for existing image -->
                <script>
                    // Global variables
                    let cropper = null;

                    // Toast function
                    function showToast(message, type = 'success') {
                        const toast = document.createElement('div');
                        toast.className = `toast_style ${type === 'success' ? 'bg-green-50' : 'bg-red-50'}`;
                        toast.innerHTML = message;
                        document.body.appendChild(toast);
                        setTimeout(() => toast.remove(), 3000);
                    }

                    // Image handling functions
                    function validateAndHandleImage(input) {
                        const file = input.files[0];
                        if (!file) return;

                        // Validate file type
                        const validTypes = ['image/jpeg', 'image/png', 'image/gif'];
                        if (!validTypes.includes(file.type)) {
                            showToast('Please upload a valid image file (JPEG, PNG, or GIF)', 'error');
                            input.value = '';
                            return;
                        }

                        // Validate file size (5MB)
                        const maxSize = 5 * 1024 * 1024;
                        if (file.size > maxSize) {
                            showToast('Image size should not exceed 5MB', 'error');
                            input.value = '';
                            return;
                        }

                        const reader = new FileReader();
                        reader.onload = function (e) {
                            const image = new Image();
                            image.src = e.target.result;

                            image.onload = function () {
                                try {
                                    // Hide preview and show cropper
                                    const previewContainer = document.getElementById('imagePreviewContainer');
                                    const cropperContainer = document.getElementById('cropperContainer');
                                    const cropperImage = document.getElementById('cropperImage');

                                    previewContainer.classList.add('hidden');
                                    cropperContainer.classList.remove('hidden');
                                    cropperImage.src = e.target.result;

                                    // Initialize cropper
                                    if (cropper) {
                                        cropper.destroy();
                                    }
                                    cropper = new Cropper(cropperImage, {
                                        aspectRatio: 1,
                                        viewMode: 2,
                                        dragMode: 'move',
                                        autoCropArea: 1,
                                        restore: false,
                                        modal: true,
                                        guides: true,
                                        highlight: true,
                                        cropBoxMovable: true,
                                        cropBoxResizable: true,
                                        toggleDragModeOnDblclick: false
                                    });
                                } catch (error) {
                                    console.error('Error initializing cropper:', error);
                                    showToast('Error initializing image cropper', 'error');
                                }
                            };
                        };
                        reader.readAsDataURL(file);
                    }

                    function saveCroppedImage() {
                        if (!cropper) {
                            showToast('No image to crop', 'error');
                            return;
                        }

                        try {
                            const canvas = cropper.getCroppedCanvas({
                                width: 400,
                                height: 400,
                                imageSmoothingEnabled: true,
                                imageSmoothingQuality: 'high'
                            });

                            if (!canvas) {
                                showToast('Failed to crop image', 'error');
                                return;
                            }

                            // Convert to base64 and store in hidden input
                            const croppedImageData = canvas.toDataURL('image/jpeg', 0.8);
                            document.getElementById('croppedImageData').value = croppedImageData;

                            // Update preview
                            const previewImage = document.getElementById('imagePreview');
                            const previewContainer = document.getElementById('imagePreviewContainer');
                            const cropperContainer = document.getElementById('cropperContainer');

                            previewImage.src = croppedImageData;
                            previewContainer.classList.remove('hidden');
                            cropperContainer.classList.add('hidden');

                            // Destroy cropper
                            cropper.destroy();
                            cropper = null;

                            showToast('Image cropped successfully', 'success');
                        } catch (error) {
                            console.error('Error saving cropped image:', error);
                            showToast('Failed to save cropped image', 'error');
                        }
                    }

                    function cancelCrop() {
                        const cropperContainer = document.getElementById('cropperContainer');
                        const previewContainer = document.getElementById('imagePreviewContainer');

                        if (cropper) {
                            cropper.destroy();
                            cropper = null;
                        }

                        cropperContainer.classList.add('hidden');

                        // If we have a previous image, show it
                        const previewImage = document.getElementById('imagePreview');
                        if (previewImage.src) {
                            previewContainer.classList.remove('hidden');
                        }
                    }

                    function resetImage() {
                        const imageInput = document.getElementById('imageInput');
                        const previewContainer = document.getElementById('imagePreviewContainer');
                        const cropperContainer = document.getElementById('cropperContainer');
                        const previewImage = document.getElementById('imagePreview');

                        if (imageInput) imageInput.value = '';
                        if (previewContainer) previewContainer.classList.add('hidden');
                        if (previewImage) previewImage.src = '';
                        if (cropperContainer) cropperContainer.classList.add('hidden');

                        if (cropper) {
                            cropper.destroy();
                            cropper = null;
                        }
                    }

                    // Form handling functions
                    async function generateCouponCode() {
                        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
                        const codeLength = 8;
                        let code = '';

                        for (let i = 0; i < codeLength; i++) {
                            const randomIndex = Math.floor(Math.random() * characters.length);
                            code += characters[randomIndex];
                        }

                        try {
                            const codeInput = document.getElementById('couponCode');
                            codeInput.value = code;
                            await checkCouponCode(code);
                        } catch (error) {
                            console.error('Error generating coupon code:', error);
                            showToast('Failed to generate coupon code', 'error');
                        }
                    }

                    async function checkCouponCode(code) {
                        try {
                            const response = await axios.get(`/admin/coupons/check-code/${code}`);
                            const statusElement = document.getElementById('codeAvailabilityStatus');
                            
                            if (response.data.exists) {
                                statusElement.textContent = 'This code is already in use';
                                statusElement.className = 'mt-1 text-sm text-red-600';
                                return false;
                            } else {
                                statusElement.textContent = 'Code is available';
                                statusElement.className = 'mt-1 text-sm text-green-600';
                                return true;
                            }
                        } catch (error) {
                            console.error('Error checking coupon code:', error);
                            showToast('Failed to check coupon code availability', 'error');
                            return false;
                        }
                    }

                    // Handle discount type change
                    function handleDiscountTypeChange(select) {
                        const maxDiscountDiv = document.getElementById('maxDiscountDiv');
                        const maxDiscountInput = document.getElementById('maxDiscount');
                        const maxDiscountError = document.getElementById('maxDiscountError');
                        
                        if (select.value === 'fixed') {
                            // Hide max discount div
                            maxDiscountDiv.style.display = 'none';
                            // Reset max discount input and remove required attribute
                            maxDiscountInput.value = '';
                            maxDiscountInput.removeAttribute('required');
                            // Clear any error message
                            maxDiscountError.textContent = '';
                            maxDiscountError.classList.add('hidden');
                        } else {
                            // Show max discount div for percentage type
                            maxDiscountDiv.style.display = 'block';
                            maxDiscountInput.setAttribute('required', 'required');
                        }
                    }

                    // Validate max discount for percentage type
                    function validateMaxDiscount(input) {
                        const errorElement = document.getElementById('maxDiscountError');
                        const discountType = document.getElementById('discountType').value;
                        const discountValue = parseFloat(document.getElementById('discountValue').value);
                        
                        if (discountType === 'percentage') {
                            const maxDiscount = parseFloat(input.value);
                            
                            if (isNaN(maxDiscount) || maxDiscount <= 0) {
                                errorElement.textContent = 'Maximum discount limit must be greater than 0';
                                errorElement.classList.remove('hidden');
                                return false;
                            }
                            
                            // Additional validation if needed
                            // For example, max discount should be reasonable compared to discount percentage
                            if (discountValue && !isNaN(discountValue)) {
                                if (maxDiscount < (discountValue / 100)) {
                                    errorElement.textContent = 'Maximum discount limit should be greater than the minimum possible discount';
                                    errorElement.classList.remove('hidden');
                                    return false;
                                }
                            }
                            
                            errorElement.classList.add('hidden');
                            return true;
                        }
                        return true; // Always return true for fixed discount type
                    }

                    // Event listeners
                    document.addEventListener('DOMContentLoaded', function() {
                        const couponCodeInput = document.getElementById('couponCode');
                        const discountTypeSelect = document.getElementById('discountType');
                        
                        if (couponCodeInput) {
                            couponCodeInput.addEventListener('input', async function() {
                                if (this.value.length >= 6) {
                                    await checkCouponCode(this.value);
                                } else {
                                    document.getElementById('codeAvailabilityStatus').textContent = '';
                                }
                            });
                        }

                        if (discountTypeSelect) {
                            handleDiscountTypeChange(discountTypeSelect); // Initial state
                            discountTypeSelect.addEventListener('change', function() {
                                handleDiscountTypeChange(this);
                            });
                        }
                    });

                    // Form handling functions
                    async function validateForm() {
                        let isValid = true;
                        const requiredFields = {
                            'couponName': 'Name',
                            'couponCode': 'Code',
                            'discountValue': 'Discount Value',
                            'minAmount': 'Minimum Amount',
                            'maxAmount': 'Maximum Amount',
                            'maxUsers': 'Maximum Users'
                        };

                        // Check required fields
                        for (const [id, label] of Object.entries(requiredFields)) {
                            const element = document.getElementById(id);
                            if (!element.value.trim()) {
                                showError(id, `${label} is required`);
                                isValid = false;
                            } else {
                                hideError(id);
                            }
                        }

                        // Validate amounts if form is still valid
                        if (isValid) {
                            const minAmount = parseFloat(document.getElementById('minAmount').value);
                            const maxAmount = parseFloat(document.getElementById('maxAmount').value);
                            const discountValue = parseFloat(document.getElementById('discountValue').value);

                            if (maxAmount <= minAmount) {
                                showError('maxAmount', 'Maximum amount must be greater than minimum amount');
                                isValid = false;
                            }

                            if (discountValue <= 0) {
                                showError('discountValue', 'Discount value must be greater than 0');
                                isValid = false;
                            }

                            if (discountValue >= maxAmount) {
                                showError('discountValue', 'Discount value must be less than maximum amount');
                                isValid = false;
                            }
                        }

                        return isValid;
                    }

                    function validateAmount(element, type) {
                        let isValid = true;
                        let errorMessage = '';

                        const value = parseFloat(element.value);
                        const minAmount = parseFloat(document.getElementById('minAmount').value);
                        const maxAmount = parseFloat(document.getElementById('maxAmount').value);
                        const discountValue = parseFloat(document.getElementById('discountValue').value);

                        switch (type) {
                            case 'minAmount':
                                if (value < 0) {
                                    errorMessage = 'Minimum amount cannot be negative';
                                    isValid = false;
                                } else if (maxAmount && value >= maxAmount) {
                                    errorMessage = 'Minimum amount must be less than maximum amount';
                                    isValid = false;
                                }
                                break;

                            case 'maxAmount':
                                if (value <= 0) {
                                    errorMessage = 'Maximum amount must be greater than 0';
                                    isValid = false;
                                } else if (value <= minAmount) {
                                    errorMessage = 'Maximum amount must be greater than minimum amount';
                                    isValid = false;
                                }
                                break;

                            case 'discountValue':
                                if (value <= 0) {
                                    errorMessage = 'Discount value must be greater than 0';
                                    isValid = false;
                                } else if (maxAmount && value >= maxAmount) {
                                    errorMessage = 'Discount value must be less than maximum amount';
                                    isValid = false;
                                }
                                break;
                        }

                        if (!isValid) {
                            showError(element.id, errorMessage);
                        } else {
                            hideError(element.id);
                        }

                        return isValid;
                    }

                    function showError(elementId, message) {
                        const element = document.getElementById(elementId);
                        const errorElement = document.getElementById(`${elementId}Error`);

                        if (element && errorElement) {
                            element.classList.add('border-red-500');
                            errorElement.textContent = message;
                            errorElement.classList.remove('hidden');
                        }
                    }

                    function hideError(elementId) {
                        const element = document.getElementById(elementId);
                        const errorElement = document.getElementById(`${elementId}Error`);

                        if (element && errorElement) {
                            element.classList.remove('border-red-500');
                            errorElement.textContent = '';
                            errorElement.classList.add('hidden');
                        }
                    }

                    // Modal functions
                    function openModal(modalType = 'add') {
                        resetForm();
                        resetImage();

                        if (modalType === 'add') {
                            document.getElementById('modalTitle').textContent = 'Add New Coupon';
                            document.getElementById('couponId').value = '';
                        }

                        document.getElementById('couponModal').classList.remove('hidden');
                    }

                    function closeModal() {
                        document.getElementById('couponModal').classList.add('hidden');
                        resetForm();
                        resetImage();
                    }

                    function resetForm() {
                        document.getElementById('couponForm').reset();
                        hideError('couponCode');
                        hideError('description');
                        hideError('discountValue');
                        hideError('maxAmount');
                        hideError('minPurchase');
                        hideError('maxUsers');
                        updateAvailabilityStatus('');
                        resetImage();
                    }

                    // Form submission
                    async function submitForm(event) {
                        event.preventDefault();

                        try {
                            if (!validateForm()) {
                                return false;
                            }

                            const formData = prepareFormData();
                            const couponId = document.getElementById('couponId').value;
                            const url = couponId ? `/admin/coupons/${couponId}` : '/admin/coupons';
                            const method = couponId ? 'PUT' : 'POST';

                            const response = await axios({
                                method: method,
                                url: url,
                                data: formData,
                                headers: {
                                    'Content-Type': 'multipart/form-data'
                                }
                            });

                            if (response.status === 200 || response.status === 201) {
                                showToast(couponId ? 'Coupon updated successfully' : 'Coupon created successfully', 'success');
                                closeModal();
                                window.location.reload();
                            }
                        } catch (error) {
                            console.error('Error submitting form:', error);
                            showToast(error.response?.data?.message || 'Failed to save coupon', 'error');
                        }

                        return false;
                    }

                    function prepareFormData() {
                        const formData = new FormData();

                        // Get basic fields
                        formData.append('name', document.getElementById('couponName').value.trim());
                        formData.append('couponCode', document.getElementById('couponCode').value.trim());
                        formData.append('description', document.getElementById('description').value.trim());
                        formData.append('discountValue', document.getElementById('discountValue').value);
                        formData.append('minAmount', document.getElementById('minAmount').value);
                        formData.append('maxAmount', document.getElementById('maxAmount').value);
                        formData.append('maxUsers', document.getElementById('maxUsers').value);

                        // Get cropped image data if available
                        const croppedImageData = document.getElementById('croppedImageData').value;
                        if (croppedImageData) {
                            formData.append('image', croppedImageData);
                        }

                        return formData;
                    }

                    // Status toggle
                    async function toggleCouponStatus(couponId, currentStatus) {
                        try {
                            const response = await axios.patch(`/admin/coupons/${couponId}/toggle`);

                            if (response.status === 200) {
                                const newStatus = response.data.isActive;
                                updateStatusButton(couponId, newStatus);
                                showToast(`Coupon ${newStatus ? 'activated' : 'deactivated'} successfully`, 'success');
                            }
                        } catch (error) {
                            console.error('Error toggling coupon status:', error);
                            showToast('Failed to update coupon status', 'error');
                        }
                    }

                    function updateStatusButton(couponId, isActive) {
                        const button = document.querySelector(`[data-coupon-id="${couponId}"] .status-button`);
                        if (button) {
                            button.textContent = isActive ? 'Active' : 'Inactive';
                            button.classList.remove(isActive ? 'bg-red-100' : 'bg-green-100');
                            button.classList.add(isActive ? 'bg-green-100' : 'bg-red-100');
                        }
                    }

                    // Coupon code functions
                    function updateAvailabilityStatus(code, isAvailable) {
                        const statusDiv = document.getElementById('codeAvailabilityStatus');
                        if (!statusDiv) return;

                        if (!code) {
                            statusDiv.textContent = '';
                            statusDiv.className = 'mt-1 text-sm';
                            return;
                        }

                        if (isAvailable) {
                            statusDiv.textContent = '✓ This code is available';
                            statusDiv.className = 'mt-1 text-sm text-green-600';
                        } else {
                            statusDiv.textContent = '✗ This code is already taken';
                            statusDiv.className = 'mt-1 text-sm text-red-600';
                        }
                    }

                    async function checkCouponExists(code) {
                        try {
                            const response = await axios.get(`/admin/coupons/check-code/${code}`);
                            return response.data.exists;
                        } catch (error) {
                            console.error('Error checking coupon code:', error);
                            throw error;
                        }
                    }

                    // Edit coupon function
                    function editCoupon(couponId) {
                        try {
                            const row = document.querySelector(`tr[data-coupon-id="${couponId}"]`);
                            if (!row) {
                                throw new Error('Coupon row not found');
                            }

                            const coupon = {
                                _id: couponId,
                                name: row.getAttribute('data-name'),
                                couponCode: row.getAttribute('data-code'),
                                description: row.getAttribute('data-description'),
                                discountType: row.getAttribute('data-discount-type'),
                                discountValue: row.getAttribute('data-discount-value'),
                                minAmount: row.getAttribute('data-min-amount'),
                                maxAmount: row.getAttribute('data-max-amount'),
                                totalLimit: row.getAttribute('data-total-limit'),
                                perUserLimit: row.getAttribute('data-per-user-limit'),
                                expiryDate: row.getAttribute('data-expiry'),
                                image: row.getAttribute('data-image')
                            };

                            populateModalForEdit(coupon);
                            openModal('edit');
                        } catch (error) {
                            console.error('Error loading coupon details:', error);
                            showToast('Failed to load coupon details', 'error');
                        }
                    }

                    function populateModalForEdit(coupon) {
                        try {
                            document.getElementById('modalTitle').textContent = 'Edit Coupon';
                            document.getElementById('couponId').value = coupon._id;
                            document.getElementById('couponName').value = coupon.name;
                            document.getElementById('couponCode').value = coupon.couponCode;
                            document.getElementById('description').value = coupon.description;
                            document.getElementById('discountValue').value = coupon.discountValue;
                            document.getElementById('minAmount').value = coupon.minAmount;
                            document.getElementById('maxAmount').value = coupon.maxAmount;
                            document.getElementById('maxUsers').value = coupon.maxUsers;

                            // Reset image related elements
                            document.getElementById('cropperContainer').classList.add('hidden');
                            document.getElementById('croppedImageData').value = '';
                            document.getElementById('imagePreviewContainer').classList.add('hidden');

                            // Show existing image preview if available
                            if (coupon.image) {
                                showExistingImage(coupon.image);
                            }
                        } catch (error) {
                            console.error('Error populating modal:', error);
                            showToast('Error loading coupon details', 'error');
                        }
                    }

                    function showExistingImage(imagePath) {
                        if (imagePath) {
                            const previewContainer = document.getElementById('imagePreviewContainer');
                            const imagePreview = document.getElementById('imagePreview');

                            // Ensure the path starts with /uploads/coupons/
                            const fullPath = imagePath.startsWith('/') ? imagePath : '/uploads/coupons/' + imagePath;
                            imagePreview.src = fullPath;

                            // Show the preview container and hide the cropper
                            previewContainer.classList.remove('hidden');
                            document.getElementById('cropperContainer').classList.add('hidden');
                        }
                    }

                    // Event listeners
                    document.addEventListener('DOMContentLoaded', function () {
                        const imageInput = document.getElementById('imageInput');
                        if (imageInput) {
                            imageInput.addEventListener('change', function () {
                                validateAndHandleImage(this);
                            });
                        }

                        // Initialize other event listeners as needed
                    });
                </script>
        </div>
</div>