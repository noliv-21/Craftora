<style>
    .toast_style {
        width: fit-content;
        max-width: 300px;
        border-radius: 8px;
        padding: 12px 20px;
        border: 1px solid rgba(255, 0, 0, 0.3);
        font-family: Arial, sans-serif;
        font-size: 16px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        position: absolute;
        top: 20px;
        right: 20px;
        z-index: 100;
    }
</style>
<div class="flex">
    <!-- Sidebar -->
    <%- include('../../partials/admin/side bar') %>

        <!-- Main Content -->
        <div class="flex-1 p-6">
            <!-- Header -->
            <%- include('../../partials/admin/header') %>

                <!-- Coupon Management Section -->
                <div class="w-full px-4 py-6 sm:px-6 lg:px-8">
                    <!-- Header section -->
                    <div
                        class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 space-y-4 sm:space-y-0">
                        <h1 class="text-2xl font-semibold text-gray-900">Coupon Management</h1>
                        <button onclick="openModal('add')"
                            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            <i class="fas fa-plus mr-2"></i>
                            Add New Coupon
                        </button>
                    </div>

                    <!-- Search and filter section -->
                    <div class="w-full bg-white rounded-lg shadow mb-6">
                        <div class="p-4 sm:p-6">
                            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                                <!-- Search input -->
                                <div class="col-span-1">
                                    <label class="block text-sm font-medium text-gray-700">Search Coupons</label>
                                    <input type="text"
                                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                        placeholder="Search by name or code">
                                </div>
                                <!-- Add more filters as needed -->
                            </div>
                        </div>
                    </div>

                    <!-- Coupons list -->
                    <div class="w-full bg-white rounded-lg shadow overflow-hidden">
                        <div class="overflow-x-auto">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th scope="col"
                                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                                            Name</th>
                                        <th scope="col"
                                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                                            Code</th>
                                        <th scope="col"
                                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                                            Discount</th>
                                        <th scope="col"
                                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                                            Usage Limits</th>
                                        <th scope="col"
                                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                                            Status</th>
                                        <th scope="col"
                                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                                            Start</th>
                                        <th scope="col"
                                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                                            Expiry</th>
                                        <th scope="col"
                                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                                            Actions</th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-200">
                                    <% coupons.forEach(coupon=> { %>
                                        <tr data-coupon-id="<%= coupon._id %>" data-name="<%= coupon.name %>"
                                            data-code="<%= coupon.couponCode %>"
                                            data-description="<%= coupon.description %>"
                                            data-discount-type="<%= coupon.discountType %>"
                                            data-discount-value="<%= coupon.discountValue %>"
                                            data-min-amount="<%= coupon.minAmount %>"
                                            data-max-discount="<%= coupon.maxDiscount %>"
                                            data-total-limit="<%= coupon.totalLimit %>"
                                            data-per-user-limit="<%= coupon.perUserLimit %>"
                                            data-starting="<%= coupon.startingDate.toISOString() %>"
                                            data-expiry="<%= coupon.expiryDate.toISOString() %>">
                                            <td class="px-6 py-4 whitespace-nowrap">
                                                <div class="text-sm font-medium text-gray-900">
                                                    <%= coupon.name %>
                                                </div>
                                                <div class="text-sm text-gray-500">
                                                    <%= coupon.description %>
                                                </div>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                <%= coupon.couponCode %>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap">
                                                <div class="text-sm text-gray-900">
                                                    <%= coupon.discountType==='PERCENTAGE' ? `${coupon.discountValue}%`
                                                        : `₹${coupon.discountValue}` %>
                                                </div>
                                                <div class="text-xs text-gray-500">
                                                    Min Order: ₹<%= coupon.minAmount %>
                                                    <% if (coupon.discountType === 'PERCENTAGE' && coupon.maxDiscount) { %>
                                                        <br>Max Discount: ₹<%= coupon.maxDiscount %>
                                                    <% } %>
                                                </div>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap">
                                                <div class="text-sm text-gray-900">
                                                    Total: <%= coupon.totalLimit ? coupon.totalLimit : 'Unlimited' %>
                                                </div>
                                                <div class="text-xs text-gray-500">
                                                    Per User: <%= coupon.perUserLimit ? coupon.perUserLimit : 'Unlimited' %>
                                                </div>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap">
                                                <span id="status-<%= coupon._id %>"
                                                    class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full <%= coupon.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' %>">
                                                    <%= coupon.isActive ? 'Active' : 'Inactive' %>
                                                </span>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                <%= new Date(coupon.startingDate).toLocaleDateString('en-IN') %>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                <%= new Date(coupon.expiryDate).toLocaleDateString('en-IN') %>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                                                <button onclick="editCoupon('<%= coupon._id %>')"
                                                    class="text-indigo-600 hover:text-indigo-900">Edit</button>
                                                <button id="toggle-<%= coupon._id %>"
                                                    onclick="toggleCouponStatus('<%= coupon._id %>', '<%= coupon.isActive %>')"
                                                    class="text-<%= coupon.isActive ? 'red' : 'green' %>-600 hover:text-<%= coupon.isActive ? 'red' : 'green' %>-800"
                                                    title="<%= coupon.isActive ? 'Click to deactivate this coupon' : 'Click to activate this coupon' %>">
                                                    <i class="fas fa-toggle-<%= coupon.isActive ? 'on' : 'off' %> text-xl"></i>
                                                </button>
                                            </td>
                                        </tr>
                                        <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Pagination -->
                    <div
                        class="w-full bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
                        <div class="flex-1 flex justify-between sm:hidden">
                            <% if (page> 1) { %>
                                <a href="?page=<%= page - 1 %>"
                                    class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">Previous</a>
                                <% } %>
                                    <% if (page * limit < totalOrders) { %>
                                        <a href="?page=<%= page + 1 %>"
                                            class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">Next</a>
                                        <% } %>
                        </div>
                        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                            <div>
                                <p class="text-sm text-gray-700">
                                    Showing <span class="font-medium">
                                        <%= (page - 1) * limit + 1 %>
                                    </span> to <span class="font-medium">
                                        <%= Math.min(page * limit, totalOrders) %>
                                    </span> of <span class="font-medium">
                                        <%= totalOrders %>
                                    </span> results
                                </p>
                            </div>
                            <div>
                                <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px"
                                    aria-label="Pagination">
                                    <% if (page> 1) { %>
                                        <a href="?page=<%= page - 1 %>"
                                            class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                            <span class="sr-only">Previous</span>
                                            <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"
                                                fill="currentColor" aria-hidden="true">
                                                <path fill-rule="evenodd"
                                                    d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
                                                    clip-rule="evenodd" />
                                            </svg>
                                        </a>
                                        <% } %>
                                            <% if (page * limit < totalOrders) { %>
                                                <a href="?page=<%= page + 1 %>"
                                                    class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                                    <span class="sr-only">Next</span>
                                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg"
                                                        viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                        <path fill-rule="evenodd"
                                                            d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                                                            clip-rule="evenodd" />
                                                    </svg>
                                                </a>
                                                <% } %>
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modal -->
                <div id="couponModal" class="fixed inset-0 z-50 hidden overflow-y-auto">
                    <div class="flex items-center justify-center min-h-screen px-4">
                        <!-- Overlay -->
                        <div class="fixed inset-0 bg-black opacity-50"></div>

                        <!-- Modal content -->
                        <div class="relative bg-white rounded-lg shadow-xl w-full max-w-2xl">
                            <!-- Modal header -->
                            <div class="flex items-center justify-between p-4 border-b">
                                <h3 class="text-xl font-semibold text-gray-900" id="modalTitle">Add New Coupon</h3>
                                <button type="button" onclick="closeModal()"
                                    class="text-gray-600 hover:text-gray-900 focus:outline-none">
                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </button>
                            </div>

                            <!-- Modal body -->
                            <div class="p-6">
                                <form id="couponForm" class="space-y-4" onsubmit="return submitForm(event)">
                                    <input type="hidden" id="couponId">
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <!-- Left column -->
                                        <div class="space-y-4">
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Name <span
                                                        class="text-red-500">*</span></label>
                                                <input type="text" id="couponName" required minlength="3" maxlength="50"
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                                    onkeyup="validateInput(this, 3, 50, 'Coupon name')">
                                                <p class="mt-1 text-sm text-red-500 hidden" id="couponNameError"></p>
                                            </div>

                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Code <span
                                                        class="text-red-500">*</span></label>
                                                <div class="mt-1 relative">
                                                    <input type="text" id="couponCode" required
                                                        pattern="^[A-Z0-9]{6,12}$"
                                                        class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                                        oninput="this.value = this.value.toUpperCase()"
                                                        onkeyup="validateInput(this, 6, 12, 'Coupon code')">
                                                    <button type="button" onclick="generateCouponCode()"
                                                        class="absolute inset-y-0 right-0 px-3 flex items-center bg-indigo-600 text-white rounded-r-md hover:bg-indigo-700">
                                                        Generate
                                                    </button>
                                                </div>
                                                <div id="codeAvailability" class="mt-1 text-sm hidden">
                                                    <div id="checkingCode" class="text-gray-500 hidden">
                                                        <i class="fas fa-spinner fa-spin"></i> Checking availability...
                                                    </div>
                                                    <div id="codeAvailable" class="text-green-600 hidden">
                                                        <i class="fas fa-check-circle"></i> Coupon code is available
                                                    </div>
                                                    <div id="codeUnavailable" class="text-red-600 hidden">
                                                        <i class="fas fa-times-circle"></i> Coupon code is already taken
                                                    </div>
                                                </div>
                                                <p class="mt-1 text-sm text-red-500 hidden" id="couponCodeError"></p>
                                            </div>

                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Description <span
                                                        class="text-red-500">*</span></label>
                                                <textarea id="description" required rows="3" minlength="10" maxlength="200"
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                                    onkeyup="validateInput(this, 10, 200, 'Description')"></textarea>
                                                <p class="mt-1 text-sm text-red-500 hidden" id="descriptionError"></p>
                                            </div>

                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Discount Type <span
                                                        class="text-red-500">*</span></label>
                                                <select id="discountType" required
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                                    <option value="percentage">Percentage</option>
                                                    <option value="fixed">Fixed Amount</option>
                                                </select>
                                                <p class="mt-1 text-sm text-red-500 hidden" id="discountTypeError"></p>
                                            </div>

                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Discount Value <span
                                                        class="text-red-500">*</span></label>
                                                <input type="number" id="discountValue" required min="0" step="1"
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                                    onchange="validateDiscountValue(this)">
                                                <p class="mt-1 text-sm text-red-500 hidden" id="discountValueError"></p>
                                            </div>

                                            <div id="maxDiscountDiv">
                                                <label class="block text-sm font-medium text-gray-700">Maximum Discount <span
                                                        class="text-red-500">*</span></label>
                                                <input type="number" id="maxDiscount" required min="0" step="1"
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                                    onchange="validateMaxDiscount(this)">
                                                <p class="mt-1 text-sm text-red-500 hidden" id="maxDiscountError"></p>
                                            </div>
                                        </div>

                                        <!-- Right column -->
                                        <div class="space-y-4">
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Minimum Amount
                                                    <span class="text-red-500">*</span></label>
                                                <input type="number" id="minAmount" required min="0" step="1"
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                                    onchange="validateAmount(this, 'minAmount')">
                                                <p class="mt-1 text-sm text-red-500 hidden" id="minAmountError"></p>
                                            </div>

                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Total Usage Limit
                                                    <span class="text-red-500">*</span></label>
                                                <input type="number" id="totalLimit" required min="1" step="1"
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                                    onchange="validateLimit(this, 'total')">
                                                <p class="mt-1 text-sm text-red-500 hidden" id="totalLimitError"></p>
                                            </div>

                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Per User Limit
                                                    <span class="text-red-500">*</span></label>
                                                <input type="number" id="perUserLimit" required min="1" step="1"
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                                    onchange="validateLimit(this, 'perUser')">
                                                <p class="mt-1 text-sm text-red-500 hidden" id="perUserLimitError"></p>
                                            </div>

                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Starting Date <span
                                                        class="text-red-500">*</span></label>
                                                <input type="datetime-local" id="startingDate" required
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                                <div id="startingDateError" class="mt-1 text-sm text-red-600 hidden"></div>
                                            </div>
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Expiry Date &
                                                    Time <span class="text-red-500">*</span></label>
                                                <input type="datetime-local" id="expiryDate" required
                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                                <p class="mt-1 text-sm text-red-500 hidden" id="expiryDateError"></p>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Modal footer -->
                                    <div class="flex items-center justify-end p-4 border-t">
                                        <button type="button" onclick="closeModal()"
                                            class="mr-3 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                                            Cancel
                                        </button>
                                        <button type="submit" form="couponForm"
                                            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700">
                                            Save Coupon
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Function to show image preview for existing image -->
                <script>
                    // Global variables
                    let cropper = null;

                    // Toast function
                    function showToast(message, type = 'success') {
                        const toast = document.createElement('div');
                        toast.className = `toast_style ${type === 'success' ? 'bg-green-50' : 'bg-red-50'}`;
                        toast.innerHTML = message;
                        document.body.appendChild(toast);
                        setTimeout(() => toast.remove(), 3000);
                    }

                    // Form handling functions
                    async function generateCouponCode() {
                        const length = 8;
                        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
                        let code = '';
                        for (let i = 0; i < length; i++) {
                            code += chars.charAt(Math.floor(Math.random() * chars.length));
                        }
                        document.getElementById('couponCode').value = code;
                        await checkCouponAvailability(code);
                    }

                    // Debounce function
                    function debounce(func, wait) {
                        let timeout;
                        return function executedFunction(...args) {
                            const later = () => {
                                clearTimeout(timeout);
                                func(...args);
                            };
                            clearTimeout(timeout);
                            timeout = setTimeout(later, wait);
                        };
                    }

                    async function checkCouponAvailability(code) {
                        const availabilityDiv = document.getElementById('codeAvailability');
                        const checkingDiv = document.getElementById('checkingCode');
                        const availableDiv = document.getElementById('codeAvailable');
                        const unavailableDiv = document.getElementById('codeUnavailable');

                        // Hide all status messages first
                        availableDiv.classList.add('hidden');
                        unavailableDiv.classList.add('hidden');

                        // Show checking message
                        availabilityDiv.classList.remove('hidden');
                        checkingDiv.classList.remove('hidden');

                        try {
                            const response = await axios.get(`/admin/coupons/check-code/${code}`);
                            
                            // Hide checking message
                            checkingDiv.classList.add('hidden');

                            if (!response.data.exists) {
                                availableDiv.classList.remove('hidden');
                                unavailableDiv.classList.add('hidden');
                            } else {
                                availableDiv.classList.add('hidden');
                                unavailableDiv.classList.remove('hidden');
                            }
                        } catch (error) {
                            console.error('Error checking coupon code:', error);
                            checkingDiv.classList.add('hidden');
                            showToast('Error checking coupon availability', 'error');
                        }
                    }

                    // Debounced version of checkCouponAvailability
                    const debouncedCheckAvailability = debounce(checkCouponAvailability, 500);

                    // Add event listener for coupon code input
                    document.getElementById('couponCode').addEventListener('input', function(e) {
                        const code = e.target.value.trim();
                        if (code.length > 0) {
                            // Show checking message immediately
                            const availabilityDiv = document.getElementById('codeAvailability');
                            const checkingDiv = document.getElementById('checkingCode');
                            const availableDiv = document.getElementById('codeAvailable');
                            const unavailableDiv = document.getElementById('codeUnavailable');

                            availabilityDiv.classList.remove('hidden');
                            checkingDiv.classList.remove('hidden');
                            availableDiv.classList.add('hidden');
                            unavailableDiv.classList.add('hidden');

                            // Call debounced function
                            debouncedCheckAvailability(code);
                        } else {
                            document.getElementById('codeAvailability').classList.add('hidden');
                        }
                    });

                    // Handle discount type change
                    function handleDiscountTypeChange(select) {
                        const maxDiscountDiv = document.getElementById('maxDiscountDiv');
                        const maxDiscountInput = document.getElementById('maxDiscount');
                        const maxDiscountError = document.getElementById('maxDiscountError');
                        
                        if (select.value === 'fixed') {
                            // Hide max discount div
                            maxDiscountDiv.style.display = 'none';
                            // Reset max discount input and remove required attribute
                            maxDiscountInput.value = '';
                            maxDiscountInput.removeAttribute('required');
                            // Clear any error message
                            maxDiscountError.textContent = '';
                            maxDiscountError.classList.add('hidden');
                        } else {
                            // Show max discount div for percentage type
                            maxDiscountDiv.style.display = 'block';
                            maxDiscountInput.setAttribute('required', 'required');
                        }
                    }

                    // Validate max discount for percentage type
                    function validateMaxDiscount(input) {
                        if (!input) return false;
                        const value = parseFloat(input.value);
                        const errorElement = document.getElementById('maxDiscountError');
                        const discountValue = parseFloat(document.getElementById('discountValue').value);
                        const discountType = document.getElementById('discountType').value.toUpperCase();
                        
                        if (!errorElement) return false;
                        
                        if (isNaN(value) || value <= 0) {
                            errorElement.textContent = 'Maximum discount must be greater than 0';
                            errorElement.classList.remove('hidden');
                            return false;
                        }

                        // For percentage discounts, make sure maxDiscount makes sense with the discount percentage
                        if (discountType === 'PERCENTAGE' && !isNaN(discountValue)) {
                            const minAmount = parseFloat(document.getElementById('minAmount').value);
                            if (!isNaN(minAmount) && value > (minAmount * discountValue / 100)) {
                                errorElement.textContent = 'Maximum discount cannot be greater than the calculated discount amount';
                                errorElement.classList.remove('hidden');
                                return false;
                            }
                        }
                        
                        errorElement.classList.add('hidden');
                        return true;
                    }

                    // Event listeners
                    document.addEventListener('DOMContentLoaded', function() {
                        const couponCodeInput = document.getElementById('couponCode');
                        const discountTypeSelect = document.getElementById('discountType');
                        
                        if (couponCodeInput) {
                            couponCodeInput.addEventListener('input', async function() {
                                if (this.value.length >= 6) {
                                    await checkCouponAvailability(this.value);
                                } else {
                                    document.getElementById('codeAvailability').classList.add('hidden');
                                }
                            });
                        }

                        if (discountTypeSelect) {
                            handleDiscountTypeChange(discountTypeSelect); // Initial state
                            discountTypeSelect.addEventListener('change', function() {
                                handleDiscountTypeChange(this);
                            });
                        }
                    });

                    // Form handling functions
                    async function validateForm() {
                        const requiredFields = [
                            { id: 'couponName', min: 3, max: 50, label: 'Coupon name' },
                            { id: 'couponCode', min: 6, max: 12, label: 'Coupon code' },
                            { id: 'description', min: 10, max: 200, label: 'Description' },
                            { id: 'discountType', min: 0, max: 0, label: 'Discount type' },
                            { id: 'discountValue', min: 0, max: 0, label: 'Discount value' },
                            { id: 'minAmount', min: 0, max: 0, label: 'Minimum amount' },
                            { id: 'maxDiscount', min: 0, max: 0, label: 'Maximum discount' },
                            { id: 'totalLimit', min: 0, max: 0, label: 'Total limit' },
                            { id: 'perUserLimit', min: 0, max: 0, label: 'Per user limit' },
                            { id: 'startingDate', label: 'Starting date' },
                            { id: 'expiryDate', min: 0, max: 0, label: 'Expiry date' }
                        ];

                        let isValid = true;

                        for (const field of requiredFields) {
                            const input = document.getElementById(field.id);
                            if (!input) {
                                console.error(`Field ${field.id} not found`);
                                continue;
                            }

                            if (field.min > 0 || field.max > 0) {
                                if (!validateInput(input, field.min, field.max, field.label)) {
                                    isValid = false;
                                }
                            } else {
                                if (!input.value.trim()) {
                                    const errorElement = document.getElementById(`${field.id}Error`);
                                    if (errorElement) {
                                        errorElement.textContent = `${field.label} is required`;
                                        errorElement.classList.remove('hidden');
                                    }
                                    isValid = false;
                                }
                            }
                        }

                        // Additional validation for numeric fields
                        const discountType = document.getElementById('discountType').value;
                        const discountValue = parseFloat(document.getElementById('discountValue').value);

                        if (discountType === 'percentage' && (discountValue <= 0 || discountValue > 100)) {
                            const errorElement = document.getElementById('discountValueError');
                            if (errorElement) {
                                errorElement.textContent = 'Percentage discount must be between 1 and 100';
                                errorElement.classList.remove('hidden');
                            }
                            isValid = false;
                        }

                        // Validate expiry date
                        const startingDate = new Date(document.getElementById('startingDate').value);
                        const expiryDate = new Date(document.getElementById('expiryDate').value);
                        const now = new Date();

                        if(startingDate < now) {
                            const errorElement = document.getElementById('startingDateError');
                            if(errorElement){
                                errorElement.textContent = 'Starting date must be in present';
                                errorElement.classList.remove('hidden');
                            }
                            isValid = false;
                        } else if(startingDate >= expiryDate) {
                            const errorElement = document.getElementById('startingDateError');
                            if(errorElement){
                                errorElement.textContent = 'Starting date must be before expiry date';
                                errorElement.classList.remove('hidden');
                            }
                            isValid = false;
                        }
                        if (expiryDate <= new Date()) {
                            const errorElement = document.getElementById('expiryDateError');
                            if (errorElement) {
                                errorElement.textContent = 'Expiry date must be in the future';
                                errorElement.classList.remove('hidden');
                            }
                            isValid = false;
                        }

                        return isValid;
                    }

                    function validateInput(input, minLength, maxLength, fieldName) {
                        if (!input) return false;
                        const value = input.value.trim();
                        const errorElement = document.getElementById(`${input.id}Error`);
                        
                        if (!errorElement) {
                            console.error(`Error element not found for ${fieldName}`);
                            return false;
                        }
                        
                        if (value.length < minLength || value.length > maxLength) {
                            errorElement.textContent = `${fieldName} must be between ${minLength} and ${maxLength} characters`;
                            errorElement.classList.remove('hidden');
                            return false;
                        }
                        
                        errorElement.classList.add('hidden');
                        return true;
                    }

                    function validateDiscountValue(input) {
                        if (!input) return false;
                        const value = parseFloat(input.value);
                        const errorElement = document.getElementById('discountValueError');
                        const discountType = document.getElementById('discountType').value.toUpperCase();
                        
                        if (!errorElement) return false;
                        
                        if (isNaN(value) || value <= 0) {
                            errorElement.textContent = 'Discount value must be greater than 0';
                            errorElement.classList.remove('hidden');
                            return false;
                        }

                        if (discountType === 'PERCENTAGE' && value > 100) {
                            errorElement.textContent = 'Percentage discount cannot exceed 100%';
                            errorElement.classList.remove('hidden');
                            return false;
                        }
                        
                        errorElement.classList.add('hidden');
                        return true;
                    }

                    function validateAmount(input) {
                        if (!input) return false;
                        const value = parseFloat(input.value);
                        const errorElement = document.getElementById(`${input.id}Error`);
                        
                        if (!errorElement) return false;
                        
                        if (isNaN(value) || value <= 0) {
                            errorElement.textContent = 'Amount must be greater than 0';
                            errorElement.classList.remove('hidden');
                            return false;
                        }
                        
                        errorElement.classList.add('hidden');
                        return true;
                    }

                    function validateLimit(input) {
                        if (!input) return false;
                        const value = parseInt(input.value);
                        const errorElement = document.getElementById(`${input.id}Error`);
                        
                        if (!errorElement) return false;
                        
                        if (isNaN(value) || value <= 0) {
                            errorElement.textContent = 'Limit must be greater than 0';
                            errorElement.classList.remove('hidden');
                            return false;
                        }
                        
                        errorElement.classList.add('hidden');
                        return true;
                    }

                    function validateExpiryDate(input) {
                        if (!input) return false;
                        const selectedDate = new Date(input.value);
                        const today = new Date();
                        const errorElement = document.getElementById('expiryDateError');
                        
                        if (!errorElement) return false;
                        
                        today.setHours(0, 0, 0, 0);
                        
                        if (selectedDate < today) {
                            errorElement.textContent = 'Expiry date must be in the future';
                            errorElement.classList.remove('hidden');
                            return false;
                        }
                        
                        errorElement.classList.add('hidden');
                        return true;
                    }

                    async function submitForm(event) {
                        event.preventDefault();
                        
                        try {
                            if (!validateForm()) {
                                showToast('Please fix the validation errors', 'error');
                                return;
                            }

                            // Get form data
                            const formData = {
                                name: document.getElementById('couponName').value.trim(),
                                couponCode: document.getElementById('couponCode').value.trim().toUpperCase(),
                                description: document.getElementById('description').value.trim(),
                                discountType: document.getElementById('discountType').value.toUpperCase(),
                                discountValue: parseFloat(document.getElementById('discountValue').value),
                                minAmount: parseFloat(document.getElementById('minAmount').value),
                                maxDiscount: parseFloat(document.getElementById('maxDiscount').value),
                                totalLimit: parseInt(document.getElementById('totalLimit').value),
                                perUserLimit: parseInt(document.getElementById('perUserLimit').value),
                                startingDate: document.getElementById('startingDate').value,
                                expiryDate: document.getElementById('expiryDate').value
                            };

                            const couponId = document.getElementById('couponId').value;
                            let response;

                            if (couponId) {
                                // Update existing coupon
                                response = await axios.patch(`/admin/coupons/${couponId}`, formData, {
                                    headers: {
                                        'Content-Type': 'application/json'
                                    }
                                });
                            } else {
                                // Create new coupon
                                response = await axios.post('/admin/coupons', formData, {
                                    headers: {
                                        'Content-Type': 'application/json'
                                    }
                                });
                            }

                            if (response.data.success) {
                                showToast(couponId ? 'Coupon updated successfully' : 'Coupon added successfully', 'success');
                                setTimeout(() => window.location.reload(), 1000);
                            } else {
                                showToast(response.data.error || `Failed to ${couponId ? 'update' : 'add'} coupon`, 'error');
                            }
                        } catch (error) {
                            console.error('Error submitting form:', error);
                            const errorMessage = error.response?.data?.error || `Failed to ${couponId ? 'update' : 'add'} coupon`;
                            showToast(errorMessage, 'error');
                        }
                    }

                    // Modal functions
                    function openModal(modalType = 'add') {
                        resetForm();

                        if (modalType === 'add') {
                            document.getElementById('modalTitle').textContent = 'Add New Coupon';
                            document.getElementById('couponId').value = '';
                        }

                        document.getElementById('couponModal').classList.remove('hidden');
                    }

                    function closeModal() {
                        document.getElementById('couponModal').classList.add('hidden');
                        resetForm();
                    }

                    function resetForm() {
                        const form = document.getElementById('couponForm');
                        if (form) form.reset();

                        // Clear all error messages
                        const errorElements = document.querySelectorAll('[id$="Error"]');
                        errorElements.forEach(element => {
                            element.textContent = '';
                            element.classList.add('hidden');
                        });

                        // Reset coupon code status
                        const statusElement = document.getElementById('codeAvailability');
                        if (statusElement) {
                            statusElement.classList.add('hidden');
                        }
                    }

                    // Edit coupon function
                    function editCoupon(couponId) {
                        try {
                            console.log('Editing coupon with ID:', couponId);
                            const row = document.querySelector(`tr[data-coupon-id="${couponId}"]`);
                            if (!row) {
                                throw new Error('Coupon row not found');
                            }

                            // Get all data attributes
                            const coupon = {
                                _id: couponId,
                                name: row.getAttribute('data-name'),
                                couponCode: row.getAttribute('data-code'),
                                description: row.getAttribute('data-description'),
                                discountType: row.getAttribute('data-discount-type'),
                                discountValue: row.getAttribute('data-discount-value'),
                                minAmount: row.getAttribute('data-min-amount'),
                                maxDiscount: row.getAttribute('data-max-discount'),
                                totalLimit: row.getAttribute('data-total-limit'),
                                perUserLimit: row.getAttribute('data-per-user-limit'),
                                startingDate: row.getAttribute('data-starting'),
                                expiryDate: row.getAttribute('data-expiry'),
                                image: row.getAttribute('data-image')
                            };

                            console.log('Retrieved coupon data:', coupon);
                            
                            // Open modal and populate form
                            openModal('edit');
                            setTimeout(() => {
                                populateModalForEdit(coupon);
                            }, 100);

                        } catch (error) {
                            console.error('Error loading coupon details:', error);
                            showToast('Failed to load coupon details', 'error');
                        }
                    }

                    function populateModalForEdit(coupon) {
                        try {
                            document.getElementById('modalTitle').textContent = 'Edit Coupon';
                            document.getElementById('couponId').value = coupon._id || '';
                            document.getElementById('couponName').value = coupon.name || '';
                            document.getElementById('couponCode').value = coupon.couponCode || '';
                            document.getElementById('description').value = coupon.description || '';
                            document.getElementById('discountType').value = coupon.discountType.toLowerCase() || 'percentage';
                            document.getElementById('discountValue').value = coupon.discountValue || '';
                            document.getElementById('minAmount').value = coupon.minAmount || '';
                            document.getElementById('maxDiscount').value = coupon.maxDiscount || '';
                            document.getElementById('totalLimit').value = coupon.totalLimit || '';
                            document.getElementById('perUserLimit').value = coupon.perUserLimit || '';

                            // Format the expiry date for datetime-local input
                            if (coupon.expiryDate) {
                                const date = new Date(coupon.expiryDate);
                                // Format: YYYY-MM-DDThh:mm
                                const formattedDate = date.getFullYear() + '-' + 
                                    String(date.getMonth() + 1).padStart(2, '0') + '-' + 
                                    String(date.getDate()).padStart(2, '0') + 'T' + 
                                    String(date.getHours()).padStart(2, '0') + ':' + 
                                    String(date.getMinutes()).padStart(2, '0');
                                document.getElementById('expiryDate').value = formattedDate;
                            }
                            if(coupon.startingDate){
                                const date = new Date(coupon.startingDate);
                                const formattedDate = date.getFullYear() + '-' + 
                                    String(date.getMonth() + 1).padStart(2, '0') + '-' + 
                                    String(date.getDate()).padStart(2, '0') + 'T' + 
                                    String(date.getHours()).padStart(2, '0') + ':' + 
                                    String(date.getMinutes()).padStart(2, '0');
                                document.getElementById('startingDate').value = formattedDate;
                            }
                        } catch (error) {
                            console.error('Error populating form:', error);
                            showToast('Failed to populate form', 'error');
                        }
                    }

                    async function toggleCouponStatus(couponId, currentStatus) {
                        try {
                            const response = await axios.patch(`/admin/coupons/${couponId}/toggle`);
                            
                            if (response.data.success) {
                                // Update the status text and classes
                                const statusSpan = document.getElementById(`status-${couponId}`);
                                const toggleButton = document.getElementById(`toggle-${couponId}`);
                                const toggleIcon = toggleButton.querySelector('i');
                                const newStatus = !JSON.parse(currentStatus);

                                // Update status badge
                                statusSpan.textContent = newStatus ? 'Active' : 'Inactive';
                                statusSpan.className = `px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                                    newStatus ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                                }`;

                                // Update toggle button
                                toggleButton.className = `text-${newStatus ? 'red' : 'green'}-600 hover:text-${newStatus ? 'red' : 'green'}-800`;
                                toggleButton.title = newStatus ? 'Click to deactivate this coupon' : 'Click to activate this coupon';
                                toggleIcon.className = `fas fa-toggle-${newStatus ? 'on' : 'off'} text-xl`;

                                // Update the onclick handler with new status
                                toggleButton.setAttribute('onclick', `toggleCouponStatus('${couponId}', '${newStatus}')`);

                                showToast(response.data.message || 'Coupon status updated successfully', 'success');
                            } else {
                                showToast(response.data.error || 'Failed to update coupon status', 'error');
                            }
                        } catch (error) {
                            console.error('Error toggling coupon status:', error);
                            showToast(error.response?.data?.error || 'Failed to update coupon status', 'error');
                        }
                    }
                </script>
        </div>
</div>