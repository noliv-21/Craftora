<style>
    body {
        font-family: 'Roboto', sans-serif;
    }
</style>
<!-- Header -->
<%-include('../../partials/user/header')%>
<!-- Breadcrumb and Sort -->
<div class="bg-orange-100 p-2 flex justify-between items-center">
    <div class="text-gray-600">
        <a href="/user/home">Home</a> &gt; <a href="/user/products">Products</a>
    </div>
    <div>
        <select class="p-2 border border-gray-300 rounded">
            <option>
                Sort by: Recommended
            </option>
        </select>
    </div>
</div>
<!-- Main Content -->
<div class="flex">
    <!-- Sidebar -->
    <aside class="w-1/6 bg-yellow-100 p-4">
        <h2 class="text-xl font-bold mb-4">
            Filters
        </h2>
        <div class="mb-4">
            <h3 class="font-bold mb-2">
                Categories
            </h3>
            <ul class="space-y-1">
                <li>
                    Halloween candles
                </li>
                <li>
                    Autumn candles
                </li>
                <li>
                    Mushroom candles
                </li>
                <li>
                    Fig tree candles
                </li>
                <li>
                    Pine cone candles
                </li>
                <li>
                    Ghost candles
                </li>
                <li>
                    Designed candles
                </li>
            </ul>
        </div>
        <div class="mb-4">
            <h3 class="font-bold mb-2">
                Price
            </h3>
            <input class="w-full" max="399" min="50" type="range" />
            <div class="text-center">
                $50 - $399+
            </div>
        </div>
        <div class="mb-4">
            <h3 class="font-bold mb-2">
                Colours
            </h3>
            <ul class="space-y-1">
                <li>
                    Orange
                </li>
                <li>
                    Green
                </li>
                <li>
                    Blue
                </li>
                <li>
                    Red
                </li>
                <li>
                    White
                </li>
                <li>
                    Pink
                </li>
                <li>
                    Brown
                </li>
            </ul>
        </div>
        <div>
            <h3 class="font-bold mb-2">
                Offers
            </h3>
            <ul class="space-y-1">
                <li>
                    10% and above
                </li>
                <li>
                    20% and above
                </li>
                <li>
                    30% and above
                </li>
                <li>
                    40% and above
                </li>
                <li>
                    50% and above
                </li>
                <li>
                    60% and above
                </li>
                <li>
                    70% and above
                </li>
                <li>
                    80% and above
                </li>
            </ul>
        </div>
    </aside>
    <!-- Products -->
    <div class="flex flex-col w-5/6 justify-between">
        <div id="productsContainer" class="grid grid-cols-2 gap-4 md:grid-cols-4 mt-4"></div>        
        <div class="flex justify-between items-center p-4">
            <div id="rangeInfo" class="text-gray-500"></div>
            <div id="paginationContainer" class="flex items-center space-x-2"></div>
        </div>
    </div>
</div>
<!-- Footer -->
<%-include('../../partials/user/footer')%>

<script>
    let currentPage = 1;
    let totalPages = 1;

    async function searchProducts() {
        const searchQuery = document.getElementById('searchInput').value;
        currentPage = 1; // Reset to the first page on new search
        await fetchProducts(searchQuery, currentPage);
    }

    async function fetchProducts(searchQuery = '', page = 1) {
        try {
            const response = await axios.get(`/user/api/products`, {
                params: { search: searchQuery, page: page },
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            });

            if (response.data.products) {
                displayProducts(response.data.products);
                updatePagination(response.data.totalPages, page, response.data.totalProducts, response.data.limit);
            }
        } catch (error) {
            console.error("Error fetching products:", error);
        }
    }

    function displayProducts(products) {
        const productsContainer = document.getElementById('productsContainer');
        productsContainer.innerHTML = ''; // Clear previous results

        if (!products || products.length === 0) {
            productsContainer.innerHTML = '<p>No products found.</p>';
            return;
        }

        products.forEach(product => {
            const productHtml = `
                <a href="/user/product/${product._id}">
                    <div class="bg-white p-4 rounded shadow">
                        <img 
                            alt="Product Image" 
                            class="w-full h-48 object-cover rounded mb-2" 
                            src="${product.image && product.image.length ? '/uploads/product-images/' + product.image[0] : '/images/no_productImage.png'}"
                        />
                        <div class="text-center">
                            <h3 class="font-bold">${product.name}</h3>
                            <div class="text-green-500">
                                <b>₹</b> ${product.sellingPrice}
                                <span class="line-through text-gray-500">₹ ${product.mrp}</span>
                                ${product.offer ? `<span class="text-red-500">(${product.offer}% off)</span>` : ''}
                            </div>
                        </div>
                    </div>
                </a>
            `;
            productsContainer.insertAdjacentHTML('beforeend', productHtml);
        });
    }

    function updatePagination(totalPages, currentPage, totalProducts, limit) {
        const paginationContainer = document.getElementById('paginationContainer');
        paginationContainer.innerHTML = ''; // Clear previous pagination buttons

        // Display range information
        const rangeInfo = document.getElementById('rangeInfo');
        const start = (currentPage - 1) * limit + 1;
        const end = Math.min(currentPage * limit, totalProducts);
        rangeInfo.innerHTML = `Showing ${start}-${end} of ${totalProducts}`;

        // Previous button
        if (currentPage > 1) {
            const prevButton = document.createElement('button');
            prevButton.classList.add('bg-gray-200', 'text-gray-700', 'px-3', 'py-1', 'rounded-md');
            prevButton.innerText = '<';
            prevButton.addEventListener('click', () => {
                currentPage -= 1;
                fetchProducts(document.getElementById('searchInput').value, currentPage);
            });
            paginationContainer.appendChild(prevButton);
        }

        // Page buttons
        for (let i = 1; i <= totalPages; i++) {
            const pageButton = document.createElement('button');
            pageButton.classList.add('px-3', 'py-1', 'rounded-md', 'text-gray-700');

            if (i === currentPage) {
                pageButton.classList.add('bg-orange-500', 'text-white');
            } else {
                pageButton.classList.add('bg-gray-200');
            }

            pageButton.innerText = i;
            pageButton.addEventListener('click', () => {
                currentPage = i;
                fetchProducts(document.getElementById('searchInput').value, i);
            });
            paginationContainer.appendChild(pageButton);
        }


        // Next button
        if (currentPage < totalPages) {
            const nextButton = document.createElement('button');
            nextButton.classList.add('bg-gray-200', 'text-gray-700', 'px-3', 'py-1', 'rounded-md');
            nextButton.innerText = '>';
            nextButton.addEventListener('click', () => {
                currentPage += 1;
                fetchProducts(document.getElementById('searchInput').value, currentPage);
            });
            paginationContainer.appendChild(nextButton);
        }
    }

    // Initial load
    document.addEventListener('DOMContentLoaded', () => fetchProducts());
</script>