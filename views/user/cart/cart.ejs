<style>
    .toast_style{
        width: fit-content;
        max-width: 300px;
        border-radius: 8px;
        padding: 12px 20px;
        border: 1px solid rgba(255, 0, 0, 0.3);
        font-family: Arial, sans-serif;
        font-size: 16px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        position: absolute;
        top: 20px;
        right: 20px;
        z-index: 100;
        /* position:sticky; */
    }
</style>
<div class="min-h-screen flex flex-col">
<!-- Header -->
<%- include('../../partials/user/header') %>

    <!-- Main Content -->
    <main class="p-8 flex-grow justify-center">
        <div class="w-full mx-auto max-w-4xl">
            <h1 id="cartHeader" class="text-2xl mb-4 text-center"><%= countOfProducts %> ITEM IN YOUR CART</h1>
            <% products.forEach((product,index)=>{ %>
            <div id="product-<%= product.productId._id %>" class="border rounded-lg p-4 flex bg-orange-200 shadow-md">
                <img alt="Product image" class="w-48 h-48 rounded-lg"
                    src="/uploads/product-images/<%= product.productId.image[0] %>"/>
                <div class="flex-1 ml-4">
                    <div class="flex flex-col md:flex-row justify-between items-start md:items-center">
                        <div class="mb-4 w-4/5 md:mb-0">
                            <h2 class="text-xl font-bold"><%= product.productId.name %></h2>
                            <p class="mt-2 text-gray-600"><%= product.productId.description %></p>
                        </div>
                        <div class="text-right w-1/5 md:ml-4">
                            <p class="text-lg font-bold">
                                Total: ₹<span id="total-price-<%= product.productId._id %>"><%= product.discountedPrice * product.quantity %></span>
                            </p>
                            <p class="text-gray-500">(₹<%= product.discountedPrice %> each)</p>
                            <span class="text-sm text-red-500 font-normal">(<%= product.bestDiscountType %>)</span>
                        </div>                                                
                    </div>
                    <div class="flex items-center space-x-4 mt-4">
                        <!-- Quantity Controls -->
                        <button onclick="updateQuantity('<%= product.productId._id %>', -1,'<%= product.productId.inventory %>','<%= product.discountedPrice %>')" class="bg-gray-300 px-2 py-1 rounded-lg">-</button>
                        <div class="bg-gray-200 px-4 py-2 rounded-lg">
                            <span id="quantity-<%= product.productId._id %>"><%= product.quantity %></span>
                        </div>
                        <button onclick="updateQuantity('<%= product.productId._id %>', 1,'<%= product.productId.inventory %>','<%= product.discountedPrice %>')" class="bg-gray-300 px-2 py-1 rounded-lg">+</button>
                        <button class="text-gray-500" onclick="removeProduct('<%= product.productId._id %>')">Remove</button>
                        <button class="bg-orange-300 text-white px-4 py-2 rounded-lg">Buy Now</button>
                    </div>
                </div>
            </div>
            <% }) %>
            <div id="checkoutButton" class="mt-8 flex justify-center" style="display: '<%= countOfProducts > 0 ? 'flex' : 'none' %>'">
                <a class="bg-orange-300 text-black px-8 py-4 rounded-lg text-xl" href="/user/checkout">Check out</a>
            </div>
        </div>
    </main>

<!-- Footer -->
<%- include('../../partials/user/footer') %>
</div>


<script>
    // Function to update quantity
    async function updateQuantity(productId, change, stock, price) {
        const quantityElement = document.getElementById(`quantity-${productId}`);
        const totalPriceElement = document.getElementById(`total-price-${productId}`);
        let currentQuantity = parseInt(quantityElement.textContent);
        const maxQuantity = Math.min(5, stock); // Limit to either 5 or stock, whichever is lower

        // Check limits before making the API call
        const newQuantity = currentQuantity + change;
        if (newQuantity < 1 || newQuantity > maxQuantity) {
            Toastify({
                text: newQuantity < 1 ? "Quantity cannot be less than 1" : "Cannot add more than " + maxQuantity + " items",
                duration: 2000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))",
                stopOnFocus: true,
                className: "toast_style"
            }).showToast();
            return;
        }

        try {
            const response = await fetch(`/user/cart/update-quantity`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ productId, change }) // Remove newQuantity as it's not expected by the backend
            });
            const data = await response.json();

            if (response.ok) {
                // Update quantity and price only if backend update was successful
                quantityElement.textContent = newQuantity;
                totalPriceElement.textContent = price * newQuantity;
                
                // Update cart header count
                const cartHeader = document.getElementById('cartHeader');
                if (cartHeader) {
                    const currentCount = parseInt(cartHeader.textContent.split(' ')[0]);
                    cartHeader.textContent = `${currentCount} ITEM${currentCount !== 1 ? 'S' : ''} IN YOUR CART`;
                }
            } else {
                Toastify({
                    text: data.message || "Error updating quantity",
                    duration: 2000,
                    gravity: "top",
                    position: "right",
                    backgroundColor: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))",
                    stopOnFocus: true,
                    className: "toast_style"
                }).showToast();
            }
        } catch (error) {
            console.error('Error:', error);
            Toastify({
                text: "Failed to update quantity",
                duration: 2000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))",
                stopOnFocus: true,
                className: "toast_style"
            }).showToast();
        }
    }

    async function removeProduct(id) {
        try {
            const response = await axios.delete('/user/cart/removeProduct', {
                data: { id }
            });
            if (response.data.success) {
                console.log('Product removed from cart');
                const productElement = document.getElementById(`product-${id}`);
                if (productElement) {
                    // Get current count before removing the product
                    const cartHeaderElement = document.getElementById('cartHeader');
                    let currentCount = parseInt(cartHeaderElement.textContent);
                    
                    // Remove the product element
                    productElement.remove();
                    
                    // Update the cart count in header
                    currentCount--;
                    cartHeaderElement.textContent = `${currentCount} ITEM IN YOUR CART`;
                    
                    // Show/hide checkout button based on count
                    const checkoutButton = document.getElementById('checkoutButton');
                    if (checkoutButton) {
                        checkoutButton.style.display = currentCount > 0 ? 'flex' : 'none';
                    }
                }
            } else {
                console.error('Failed to remove product:', response.data.message);
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }
</script>
