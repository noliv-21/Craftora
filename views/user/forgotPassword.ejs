<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
<style>
    body {
        font-family: 'Roboto', sans-serif;
    }

    .input-field:focus {
        outline: none;
        box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.5);
    }

    .btn-primary:hover {
        background-color: #2b6cb0;
    }

    .btn-primary:active {
        background-color: #2c5282;
    }

    .background-pattern {
        background: radial-gradient(circle, rgba(238, 174, 202, 1) 0%, rgba(148, 187, 233, 1) 100%);
    }

    .input-field {
        transition: all 0.3s ease-in-out;
    }

    .input-field:hover {
        transform: scale(1.05);
    }

    .input-field:focus {
        transform: scale(1.05);
    }

    .toast_style{
        width: fit-content;
        max-width: 300px;
        border-radius: 8px;
        padding: 12px 20px;
        border: 1px solid rgba(255, 0, 0, 0.3);
        font-family: Arial, sans-serif;
        font-size: 16px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        position: absolute;
        top: 20px;
        right: 20px;
    }
</style>
<div class="background-pattern w-full flex items-center justify-center min-h-screen bg-gray-200 bg-opacity-70">
    <div>
        <img src="/images/user/forgot_password_illustration.png" class="w-3/4 h-auto" alt="forgotPasswordIllustration">
    </div>
    <div
        class="bg-opacity-40 backdrop-blur-md p-10 rounded-2xl shadow-2xl w-1/2 max-w-lg transform transition-all duration-500 hover:scale-105 border border-white border-opacity-30">
        <h2 class="text-3xl font-bold mb-8 text-center text-blue-600">Forgot Password</h2>
        <form>
            <div id="otpDiv">
                <div class="mb-6">
                    <label for="email" class="block text-gray-700 font-medium mb-2">Email</label>
                    <input type="email" id="email" name="email" oninput="validateEmail()"
                        class="input-field w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200"
                        placeholder="Enter your email">
                    <p id="email_error" class="hidden text-red-600"></p>
                    <button type="button" id="resendBtn" onclick="otpResend()"
                    class="bg-gradient-to-r from-blue-300 via-blue-400 to-blue-500 mt-2 text-white font-semibold py-2 px-6 rounded-lg shadow-m hidden">Resend OTP</button>
                </div>
                <button type="button" onclick="sendOtp()"
                    class="btn w-full bg-pink-400 text-white font-medium py-3 rounded-lg transition duration-200">Send
                    OTP</button>
                <div id="otpVerifyDiv" class="hidden">
                    <div class="mb-6">
                        <label for="otp" class="block text-gray-700 font-medium mb-2">OTP</label>
                        <input type="number" id="otp"
                            class="input-field w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200"
                            placeholder="Enter the OTP">
                    </div>
                    <button type="button" onclick="verifyOtp()"
                        class="btn w-full bg-blue-500 text-white font-medium py-3 rounded-lg transition duration-200">Verify
                        OTP</button>
                </div>
            </div>
            <div id="newPasswordDiv" class="hidden">
                <div class="mb-6">
                    <label for="new-password" class="block text-gray-700 font-medium mb-2">New Password</label>
                    <input type="password" id="new-password" oninput="validatePassword()"
                        class="input-field w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200"
                        placeholder="Enter new password">
                    <p id="password_error" class="hidden text-red-600"></p>
                </div>
                <div class="mb-8">
                    <label for="current-password" class="block text-gray-700 font-medium mb-2">Confirm Password</label>
                    <input type="password" id="confirm-password" oninput="validateCfmPassword()"
                        class="input-field w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200"
                        placeholder="Enter current password">
                    <p id="cfmPassword_error" class="hidden text-red-600"></p>
                </div>
                <button type="button" onclick="changePassword()"
                    class="btn w-full bg-blue-600 text-white font-medium py-3 rounded-lg transition duration-200">Reset
                    Password</button>
            </div>
        </form>
    </div>
</div>
<script>
    //Global
    const email_check = /^([A-Za-z0-9_\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
    const password_check = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[~!@#$%^&*()-_+=])[A-Za-z\d~!@#$%^&*()-_+=]{8,64}$/;

    function validateEmail() {
        const email = document.getElementById('email').value.trim();
        const email_error = document.getElementById('email_error')
        if (email === "") {
            email_error.textContent = "Email is required.";
            email_error.classList.remove('hidden')
            return false;
        } else if (!email_check.test(email)) {
            email_error.textContent = "E-mail is not in correct format";
            email_error.classList.remove('hidden')
            return false;
        } else {
            email_error.textContent = "";
            email_error.classList.add('hidden')
            return true;
        }
    }

    function validatePassword() {
        const newPass = document.getElementById('new-password').value.trim();
        const password_error = document.getElementById('password_error')
        if (passwordInput.value.trim() === "") {
            password_error.textContent = "Password is required.";
            password_error.classList.remove('hidden')
            return false;
        } else if (!password_check.test(passwordInput.value)) {
            password_error.textContent = "Must include at least one uppercase, lowercase, symbols, digits, and it should be of 8 letters.";
            password_error.classList.remove('hidden')
            return false;
        } else {
            password_error.textContent = "";
            password_error.classList.add('hidden')
            return true;
        }
    }
    function validateCfmPassword() {
        const newPass = document.getElementById('new-password').value.trim();
        const cfmPass = document.getElementById('confirm-password').value.trim();
        const cfmPassword_error = document.getElementById('cfmPassword_error')
        if (cfmPass === '') {
            cfmPassword_error.textContent("Please confirm password")
            cfmPassword_error.classList.remove('hidden')
            return false;
        } else if (cfmPass !== newPass) {
            cfmPassword_error.textContent("Password's doesn't match")
            cfmPassword_error.classList.remove('hidden')
            return false;
        } else {
            cfmPassword_error.textContent = '';
            cfmPassword_error.classList.add('hidden')
            return true;
        }
    }

    async function sendOtp() {
        let email = document.getElementById('email').value.trim();
        const div = document.getElementById('otpVerifyDiv')
        const resendBtn = document.getElementById('resendBtn')
        try {
            if (validateEmail) {
                const response = await axios.post('/user/sendOtp', { email })
                if (response.status === 200) {
                    Toastify({
                        text: response.data,
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "linear-gradient(135deg, rgba(238, 174, 202, 0.9), rgba(148, 187, 233, 0.9))",
                        stopOnFocus: true,
                        className: "toast_style"
                    }).showToast();
                    resendBtn.classList.remove('hidden')
                    div.classList.remove('hidden')
                }else {
                    Toastify({
                        text: response.data,
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))",
                        stopOnFocus: true,
                        className: "toast_style"
                    }).showToast();
                }
            }
        } catch (error) {
            console.error(error)
            Toastify({
                text: response.data,
                duration: 3000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))",
                stopOnFocus: true,
                className: "toast_style"
            }).showToast();
        }
    }

    async function verifyOtp() {
        try {
            const otp = document.getElementById('otp').value.trim()
            const newPasswordDiv = document.getElementById('newPasswordDiv')
            const otpDiv = document.getElementById('otpDiv')
            const isForgot = true;
            const response = await axios.post('/user/verify_otp', { otp, isForgot })
            if (response.status === 200) {
                Toastify({
                    text: response.data,
                    duration: 3000,
                    gravity: "top",
                    position: "right",
                    backgroundColor: "linear-gradient(135deg, rgba(238, 174, 202, 0.9), rgba(148, 187, 233, 0.9))",
                    stopOnFocus: true,
                    className: "toast_style"
                }).showToast();
                newPasswordDiv.classList.remove('hidden')
                otpDiv.classList.add('hidden')
            }
        } catch (error) {
            console.error(error)
            Toastify({
                text: response.data,
                duration: 3000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))",
                stopOnFocus: true,
                className: "toast_style"
            }).showToast();
        }
    }

    async function otpResend() {
        let email = document.getElementById('email').value.trim();
        try {
            const response = await axios.post('/user/otp_resend',{ email })
            if(response.status === 200){
                Toastify({
                    text: response.data.message,
                    duration: 3000,
                    gravity: "top",
                    position: "right",
                    backgroundColor: "linear-gradient(135deg, rgba(238, 174, 202, 0.9), rgba(148, 187, 233, 0.9))",
                    stopOnFocus: true,
                    className: "toast_style"
                }).showToast();
            } else {
                Toastify({
                    text: response.data,
                    duration: 3000,
                    gravity: "top",
                    position: "right",
                    backgroundColor: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))",
                    stopOnFocus: true,
                    className: "toast_style"
                }).showToast();
            }
        } catch (error) {
            console.error(error)
            const errorMessage = error.response?.data || "An unexpected error occurred";
            Toastify({
                text: errorMessage,
                duration: 3000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))",
                stopOnFocus: true,
                className: "toast_style"
            }).showToast();
        }
    }

    async function changePassword() {
        try {
            const email = document.getElementById('email').value.trim()
            const newPass = document.getElementById('new-password').value.trim();
            const cfmPass = document.getElementById('confirm-password').value.trim();
            if (validatePassword && validateCfmPassword) {
                const response = await axios.post('/user/changePassword', { email, newPass })
                if (response.status === 200) {
                    Toastify({
                        text: response.data,
                        duration: 2000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "linear-gradient(135deg, rgba(238, 174, 202, 0.9), rgba(148, 187, 233, 0.9))",
                        stopOnFocus: true,
                        className: "toast_style"
                    }).showToast();
                    setTimeout(()=>{
                        window.location.href = "/user/login"
                    },2000)
                }
            }
        } catch (error) {
            console.error(error)
            Toastify({
                text: response.data,
                duration: 3000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))",
                stopOnFocus: true,
                className: "toast_style"
            }).showToast();
        }
    }
</script>