<style>
    .modal {
        display: none;
        /* Initially hidden */
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.3s ease;
        visibility: hidden;
        /* Hidden until modal is shown */
    }

    .modal.show {
        display: flex;
        opacity: 1;
        visibility: visible;
    }

    .modal-content {
        background-color: #fff;
        padding: 30px 20px;
        border-radius: 8px;
        width: 400px;
        max-width: 90%;
        transform: translateY(-20px);
        transition: transform 0.3s ease;
    }

    .modal.show .modal-content {
        transform: translateY(0);
    }

    .toast_style{
        width: fit-content;
        max-width: 300px;
        border-radius: 8px;
        padding: 12px 20px;
        border: 1px solid rgba(255, 0, 0, 0.3);
        font-family: Arial, sans-serif;
        font-size: 16px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        position: absolute;
        top: 20px;
        right: 20px;
    }
</style>

<!-- Header -->
<%- include('../../partials/user/order_header') %>

<div class="flex justify-center mt-4">
    <div class="text-center">
        <h1 class="text-3xl italic">Choose a delivery address</h1>
    </div>
</div>
<div class="flex justify-center mt-6">
    <% if(addresses && addresses.length>0){ %>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <% addresses.forEach((address, index) => { %>
                <div class="bg-orange-200 p-4 rounded-lg shadow-md">
                    <div class="flex items-start">
                        <input type="radio" name="address" class="mt-1 mr-2">
                        <div>
                            <h2><%= address.typeOfAddress %></h2>
                            <p class="font-bold"><%= address.name %></p>
                            <p><%= address.streetAddress %></p>
                            <p><%= address.city %>, <%= address.pincode %></p>
                            <p><%= address.state %>, <%= address.country %></p>
                            <p><%= address.phone %></p>
                        </div>
                        <div class="ml-auto flex space-x-2">
                            <button class="bg-gray-600 text-white px-3 py-1 rounded-full" onclick="editAddressModal('<%= JSON.stringify(address) %>')">Edit</button>
                            <a class="bg-black text-white px-4 py-2 rounded" href="/user/order/dispatch?address=<%= address._id %>">Dispatch here</a>
                        </div>
                    </div>
                </div>
            <% }) %>
        </div>
    <% } else{ %>
        <div class="w-full flex justify-center">
            <img class="h-[300px] w-[300px]" src="/images/no address.webp" alt="">
        </div>
    <% } %>
</div>
<div class="flex justify-center mt-6">
    <button class="text-white bg-orange-300 px-3 py-1 rounded-md inline-flex font-bold text-lg items-center" onclick="openAddressModal()"><i class="fas fa-plus mr-2"></i> Add a new address</button>
</div>
<!-- Add Address Modal -->
<div id="addressModal" class="modal hidden">
    <div class="modal-content w-3/4 p-6 bg-white rounded-lg shadow-lg relative">
        <span class="inline-flex close-button text-right text-lg cursor-pointer absolute top-2 right-2" onclick="closeModal()">Ã—</span>
        <h2 class="font-bold text-xl mb-4 text-center">Enter the Address Details</h2>
        <form id="addressForm" action="/user/addAddress" class="flex flex-col gap-4">
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label class="block mb-2">Name</label>
                    <input id="nameInput" type="text" name="name" placeholder="Full Name" oninput="validateName()" class="w-full p-2 bg-yellow-200 rounded" required>
                    <span id="nameError"></span>
                </div>
                <div>
                    <label class="block mb-2">Street Address</label>
                    <input id="addressInput" type="text" name="streetAddress" placeholder="Street Address" oninput="validateStreetAddress()" class="w-full p-2 bg-yellow-200 rounded" required>
                    <span id="addressError"></span>
                </div>
                <div>
                    <label class="block mb-2">City</label>
                    <input id="cityInput" type="text" name="city" placeholder="City" oninput="validateCity()" class="w-full p-2 bg-yellow-200 rounded" required>
                    <span id="cityError"></span>
                </div>
                <div>
                    <label class="block mb-2">State</label>
                    <input id="stateInput" type="text" name="state" placeholder="State" oninput="validateState()" class="w-full p-2 bg-yellow-200 rounded" required>
                    <span id="stateError"></span>
                </div>
                <div>
                    <label class="block mb-2">Country</label>
                    <input id="countryInput" type="text" name="country" placeholder="Country" oninput="validateCountry()" class="w-full p-2 bg-yellow-200 rounded" required>
                    <span id="countryError"></span>
                </div>
                <div>
                    <label class="block mb-2">Pincode</label>
                    <input id="pincodeInput" type="text" name="pincode" placeholder="Pincode" oninput="validatePincode()" class="w-full p-2 bg-yellow-200 rounded" required>
                    <span id="pincodeError"></span>
                </div>
                <div>
                    <label class="block mb-2">Phone</label>
                    <input id="phoneInput" type="text" name="phone" placeholder="Phone Number" oninput="validatePhone()" class="w-full p-2 bg-yellow-200 rounded" required>
                    <span id="phoneError"></span>
                </div>
            </div>
            <div class="mt-6 text-center">
                <button type="button" class="bg-green-500 text-white py-2 px-6 rounded-full" onclick="addAddress()">Add Address</button>
            </div>
        </form>
        <div id="message" class="hidden mt-4 text-center"></div>
    </div>
</div>

<script>
    function openAddressModal(address = null) {
        const modal = document.getElementById('addressModal');

        // Set modal title and button text
        const modalTitle = document.querySelector('#addressModal h2');
        const submitButton = document.querySelector('#addressModal button[type="button"]');

        if (typeof address === 'undefined') {
            console.error('Address is not defined');
            return; // Exit the function if address is not defined
        }
        if (address && typeof address === 'object') {
            // Editing mode
            modalTitle.textContent = 'Edit Address Details';
            submitButton.textContent = 'Save Changes';

            // Prefill form fields with address data
            document.getElementById('nameInput').value = address.name;
            document.getElementById('addressInput').value = address.streetAddress;
            document.getElementById('cityInput').value = address.city;
            document.getElementById('stateInput').value = address.state;
            document.getElementById('countryInput').value = address.country;
            document.getElementById('pincodeInput').value = address.pincode;
            document.getElementById('phoneInput').value = address.phone;

            // Set an attribute to identify edit mode
            submitButton.setAttribute('data-edit-mode', true);
            submitButton.setAttribute('data-address-id', address._id);

        } else {
            // Adding mode
            modalTitle.textContent = 'Enter Address Details';
            submitButton.textContent = 'Add Address';

            // Clear form fields
            document.getElementById('addressForm').reset();
            submitButton.removeAttribute('data-edit-mode');
            submitButton.removeAttribute('data-address-id');
        }


        modal.classList.remove('hidden')
        modal.classList.add('show')
    }

    function closeModal() {
        const modal = document.getElementById('addressModal')
        modal.classList.remove('show')
        setTimeout(() => {
            modal.classList.add('hidden')
        }, 300);
    }

    function validateName() {
        const input = document.getElementById('nameInput').value.trim();
        const error = document.getElementById('nameError');
        if (!input || !/^[a-zA-Z\s]+$/.test(input)) {
            error.textContent = 'Name should only contain letters';
            error.style.color = 'red';
            return false;
        } else {
            error.textContent = '';
            return true;
        }
    }

    function validateStreetAddress() {
        const input = document.getElementById('addressInput').value.trim();
        const error = document.getElementById('addressError');
        if (!input || input.length < 5) {
            error.textContent = 'Street address should be at least 5 characters long';
            error.style.color = 'red';
            return false;
        } else {
            error.textContent = '';
            return true;
        }
    }

    function validateCity() {
        const input = document.getElementById('cityInput').value.trim();
        const error = document.getElementById('cityError');
        if (!input || !/^[a-zA-Z\s]+$/.test(input)) {
            error.textContent = 'City should only contain letters';
            error.style.color = 'red';
            return false;
        } else {
            error.textContent = '';
            return true;
        }
    }

    function validateState() {
        const input = document.getElementById('stateInput').value.trim();
        const error = document.getElementById('stateError');
        if (!input || !/^[a-zA-Z\s]+$/.test(input)) {
            error.textContent = 'State should only contain letters';
            error.style.color = 'red';
            return false;
        }else if(input[0].toLowerCase() === input[0]){
            error.textContent = 'First letter should be uppercase';
            error.style.color = 'red';
            return false;
        } else {
            error.textContent = '';
            return true;
        }
    }

    function validateCountry() {
        const input = document.getElementById('countryInput').value.trim();
        const error = document.getElementById('countryError');
        if (!input || !/^[a-zA-Z\s]+$/.test(input)) {
            error.textContent = 'Country should only contain letters';
            error.style.color = 'red';
            return false;
        } else {
            error.textContent = '';
            return true;
        }
    }

    function validatePincode() {
        const input = document.getElementById('pincodeInput').value.trim();
        const error = document.getElementById('pincodeError');
        if (!/^\d{5,6}$/.test(input)) {
            error.textContent = 'Pincode should be 5 or 6 digits';
            error.style.color = 'red';
            return false;
        } else {
            error.textContent = '';
            return true;
        }
    }

    function validatePhone() {
        const input = document.getElementById('phoneInput').value.trim();
        const error = document.getElementById('phoneError');
        if (!/^\d{10}$/.test(input)) {
            error.textContent = 'Phone number should be exactly 10 digits';
            error.style.color = 'red';
            return false;
        } else {
            error.textContent = '';
            return true;
        }
    }

    async function addAddress() {
        // Run all validations
        const isNameValid = validateName();
        const isStreetAddressValid = validateStreetAddress();
        const isCityValid = validateCity();
        const isStateValid = validateState();
        const isCountryValid = validateCountry();
        const isPincodeValid = validatePincode();
        const isPhoneValid = validatePhone();
        const form = document.getElementById('addressForm')

        if (isNameValid && isStreetAddressValid && isCityValid && isStateValid && isCountryValid && isPincodeValid && isPhoneValid) {
            const submitButton = document.querySelector('#addressModal button[type="button"]');
            const isEditMode = submitButton.getAttribute('data-edit-mode') === 'true';
            const addressId = submitButton.getAttribute('data-address-id');

            const form = document.getElementById('addressForm');
            const message = document.getElementById('message');
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            try {
                const response = await fetch(isEditMode ? `/user/editAddress/${addressId}` : '/user/addAddress', {
                    method: isEditMode ? 'PATCH' : 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                });

                const result = await response.json();

                if (response.status === 200 || response.status === 201) {
                    message.classList.remove('hidden');
                    message.classList.add('text-green-500');
                    message.textContent = isEditMode ? 'Address updated successfully!' : 'Address added successfully!';
                    message.style.display = 'block';
                    Toastify({
                        text: response.data,
                        duration: 2000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "linear-gradient(135deg, rgba(238, 174, 202, 0.9), rgba(148, 187, 233, 0.9))",
                        stopOnFocus: true,
                        className: "toast_style"
                    }).showToast();
                    setTimeout(() => {
                        message.classList.add('hidden')
                        message.textContent = ''
                        message.style.display = 'none'
                        closeModal(); // Close the modal if successful
                        setTimeout(() => {
                            location.reload();
                        }, 500);
                    }, 1500)
                } else {
                    // alert(result.error || "Failed to save address.");
                    Toastify({
                        text: response.data,
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))",
                        stopOnFocus: true,
                        className: "toast_style"
                    }).showToast();
                }
            } catch (error) {
                console.error("Error:", error);
                alert(error.data.error);
            }
        } else {
            alert("Please correct the highlighted errors.");
        }
    }

    // function editAddressModal(address) {
    //     console.log("Received address:", address);
    //     openAddressModal(address);
    // }

    function editAddressModal(addressJson) {
        try {
            console.log("Received address:", addressJson);
            const address = JSON.parse(addressJson); // Parse the JSON string back into an object
            openAddressModal(address);
        } catch (error) {
            console.error("Error parsing address:", error);
        }
    }
    //     function fetchAddressData(addressId) {
    //     // Simulate an API call to fetch address data
    //     return {
    //         id: addressId,
    //         street: "123 Main St",
    //         city: "Anytown",
    //         state: "CA",
    //         zip: "12345"
    //     };
    // }

    //     function editAddressModal(addressId) {
    //     const address = fetchAddressData(addressId); // Fetch address data
    //     openAddressModal(address); // Pass the address to the modal
    // }

//     function dispatchOrder(addressId) {
//         fetch(`/user/order/dispatch?address=${addressId}`)
//         .then(response => {
//         if (response.ok) {
//             console.log("Address selected")
//         } else {
//             alert("Failed to select address.");
//         }
//     })
//     .catch(error => {
//         console.error("Error dispatching address:", error);
//         alert("An error occurred while processing your request.");
//     });
// }

</script>