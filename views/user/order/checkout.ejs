<!-- Header -->
<%- include('../../partials/user/header') %>

<!-- Main Content -->
<main class="flex">
    <!-- Main Section -->
    <div class="flex-1 p-8 bg-gray-50">
        <div class="max-w-7xl mx-auto">
            <h1 class="text-3xl font-bold text-gray-800 mb-8 text-center">Checkout</h1>
            
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <!-- Left Column: Address Selection -->
                <div class="lg:col-span-2">
                    <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
                        <h2 class="text-2xl font-semibold text-gray-700 mb-4">Delivery Address</h2>
                        <div id="addressList" class="space-y-4">
                            <% addresses.forEach(address => { %>
                                <div data-address-id="<%= address._id %>" class="address-card rounded-lg p-4 border-2 border-transparent transition-all duration-200 hover:border-orange-400">
                                    <div class="flex justify-between items-start">
                                        <div>
                                            <h3 class="font-bold text-gray-800"><%= address.name %></h3>
                                            <p class="text-gray-600"><%= address.streetAddress %></p>
                                            <p class="text-gray-600"><%= address.city %>, <%= address.state %></p>
                                            <p class="text-gray-600"><%= address.country %> - <%= address.pincode %></p>
                                            <p class="text-gray-600">Phone: <%= address.phone %></p>
                                        </div>
                                        <div class="flex space-x-2">
                                            <button onclick="editAddress('<%= JSON.stringify(address) %>')" class="px-3 py-1 bg-gray-600 text-white rounded-full hover:bg-gray-700 transition-colors">Edit</button>
                                            <button onclick="selectAddress('<%= address._id %>', this)" class="px-4 py-1 bg-orange-400 text-white rounded-full hover:bg-orange-500 transition-colors">Select</button>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                        <div class="mt-4">
                            <button onclick="openAddressModal()" class="flex items-center px-4 py-2 bg-orange-400 text-white rounded-lg hover:bg-orange-500 transition-colors">
                                <i class="fas fa-plus mr-2"></i>
                                Add New Address
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Right Column: Order Summary -->
                <div class="lg:col-span-1">
                    <div class="bg-white rounded-lg shadow-lg p-6">
                        <h2 class="text-2xl font-semibold text-gray-700 mb-4">Order Summary</h2>
                        <div class="space-y-4">
                            <div class="flex justify-between text-gray-600">
                                <span>Subtotal</span>
                                <span>₹<%= total %></span>
                            </div>
                            <div class="flex justify-between text-gray-600">
                                <span>Shipping</span>
                                <span>Free</span>
                            </div>
                            <hr class="border-gray-200">
                            <div class="flex justify-between font-bold text-lg">
                                <span>Total</span>
                                <span class="text-orange-500">₹<%= total %></span>
                            </div>

                            <!-- Coupon Section -->
                            <div class="border-t border-b border-gray-200 py-4">
                                <div class="flex items-center space-x-2">
                                    <input type="text" id="couponCode" placeholder="Enter coupon code" style="text-transform: uppercase;" 
                                        class="flex-1 px-3 py-2 border rounded-lg focus:ring-2 focus:ring-orange-400 focus:border-orange-400">
                                    <button onclick="applyCoupon()" 
                                        class="px-4 py-2 bg-orange-400 text-white rounded-lg hover:bg-orange-500 transition-colors">
                                        Apply
                                    </button>
                                </div>
                                <p id="couponMessage" class="text-sm mt-2"></p>
                            </div>

                            <div class="flex justify-between text-gray-600">
                                <span>Discount</span>
                                <span id="discountAmount">₹0</span>
                            </div>

                            <!-- Payment Options -->
                            <div class="mt-6">
                                <h3 class="font-semibold text-gray-700 mb-3">Payment Method</h3>
                                <div class="space-y-2">
                                    <label class="flex items-center space-x-3 p-3 bg-yellow-100 rounded-lg cursor-pointer hover:bg-yellow-200 transition-colors">
                                        <input type="radio" name="payment" value="COD" class="text-orange-500 focus:ring-orange-500">
                                        <span>Cash on Delivery</span>
                                    </label>
                                    <label class="flex items-center space-x-3 p-3 bg-yellow-100 rounded-lg cursor-pointer hover:bg-yellow-200 transition-colors">
                                        <input type="radio" name="payment" value="online" class="text-orange-500 focus:ring-orange-500">
                                        <span>Online Payment</span>
                                    </label>
                                    <label class="flex items-center space-x-3 p-3 bg-yellow-100 rounded-lg cursor-pointer hover:bg-yellow-200 transition-colors">
                                        <input type="radio" name="payment" value="wallet" class="text-orange-500 focus:ring-orange-500">
                                        <span>Wallet Payment</span>
                                    </label>
                                </div>
                            </div>

                            <button onclick="placeOrder('<%= total %>')" class="w-full py-3 bg-orange-400 text-white rounded-lg hover:bg-orange-500 transition-colors mt-6">
                                Place Order
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

<!-- Footer -->
<%- include('../../partials/user/footer') %>

<style>
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
        z-index: 1000;
        opacity: 0;
        transition: all 0.3s ease-in-out;
    }

    .modal.show {
        display: flex;
        opacity: 1;
    }

    .modal-content {
        transform: translateY(-20px);
        transition: transform 0.3s ease-in-out;
    }

    .modal.show .modal-content {
        transform: translateY(0);
    }

    .toast {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 12px 24px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        z-index: 1000;
        transform: translateX(120%);
        transition: transform 0.3s ease-in-out;
    }

    .toast.show {
        transform: translateX(0);
    }

    .address-card {
        background-image: linear-gradient(to right, #ffecd2, #ffcb8c);
        color: inherit;
    }
</style>

<!-- Address Modal -->
<div id="addressModal" class="modal">
    <div class="modal-content w-full max-w-xl bg-white rounded-lg shadow-lg relative">
        <div class="bg-orange-400 text-white p-4 rounded-t-lg">
            <h2 class="text-xl font-semibold" id="modalTitle">Add New Address</h2>
            <button onclick="closeModal()" class="absolute top-3 right-3 text-white hover:text-yellow-200">
                <i class="fas fa-times text-xl"></i>
            </button>
        </div>
        
        <form id="addressForm" class="p-6">
            <div class="space-y-4">
                <div>
                    <label class="block text-gray-700 font-medium mb-1">Full Name</label>
                    <input type="text" id="nameInput" class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-orange-400 focus:border-orange-400" placeholder="Enter your full name">
                    <span id="nameError" class="text-red-500 text-sm"></span>
                </div>

                <div>
                    <label class="block text-gray-700 font-medium mb-1">Street Address</label>
                    <input type="text" id="streetInput" class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-orange-400 focus:border-orange-400" placeholder="Enter street address">
                    <span id="streetError" class="text-red-500 text-sm"></span>
                </div>

                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="block text-gray-700 font-medium mb-1">City</label>
                        <input type="text" id="cityInput" class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-orange-400 focus:border-orange-400" placeholder="Enter city">
                        <span id="cityError" class="text-red-500 text-sm"></span>
                    </div>
                    <div>
                        <label class="block text-gray-700 font-medium mb-1">State</label>
                        <input type="text" id="stateInput" class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-orange-400 focus:border-orange-400" placeholder="Enter state">
                        <span id="stateError" class="text-red-500 text-sm"></span>
                    </div>
                </div>

                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="block text-gray-700 font-medium mb-1">Country</label>
                        <input type="text" id="countryInput" class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-orange-400 focus:border-orange-400" placeholder="Enter country">
                        <span id="countryError" class="text-red-500 text-sm"></span>
                    </div>
                    <div>
                        <label class="block text-gray-700 font-medium mb-1">Pincode</label>
                        <input type="text" id="pincodeInput" class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-orange-400 focus:border-orange-400" placeholder="Enter pincode">
                        <span id="pincodeError" class="text-red-500 text-sm"></span>
                    </div>
                </div>

                <div>
                    <label class="block text-gray-700 font-medium mb-1">Phone Number</label>
                    <input type="tel" id="phoneInput" class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-orange-400 focus:border-orange-400" placeholder="Enter phone number">
                    <span id="phoneError" class="text-red-500 text-sm"></span>
                </div>
            </div>

            <div class="mt-6 flex justify-end space-x-3">
                <button type="button" onclick="closeModal()" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors">
                    Cancel
                </button>
                <button type="submit" class="px-6 py-2 bg-orange-400 text-white rounded-lg hover:bg-orange-500 transition-colors">
                    Save Address
                </button>
            </div>
        </form>
    </div>
</div>

<script>
let selectedAddressId = null;

function selectAddress(addressId, buttonElement) {
    selectedAddressId = addressId;
    // Remove selection from all addresses
    document.querySelectorAll('#addressList > div').forEach(div => {
        div.classList.remove('border-red-500');
        div.querySelector('button:last-child').textContent = 'Select';
    });
    // Add selection to clicked address
    const addressCard = buttonElement.closest('[data-address-id]');
    addressCard.classList.add('border-red-500');
    buttonElement.textContent = 'Selected';
}

function editAddress(addressData) {
    try {
        // Parse the address data if it's a string
        const address = typeof addressData === 'string' ? JSON.parse(addressData) : addressData;
        
        // Open modal with the address data
        openAddressModal(address);
    } catch (error) {
        console.error("Error parsing address data:", error);
        showToast('Failed to load address data', true);
    }
}

function openAddressModal(address = null) {
    const modal = document.getElementById('addressModal');
    const modalTitle = document.getElementById('modalTitle');
    const form = document.getElementById('addressForm');

    // Reset form and clear any previous errors
    form.reset();
    clearErrors();

    if (address) {
        // Edit mode
        modalTitle.textContent = 'Edit Address';
        
        // Fill form with existing address data
        document.getElementById('nameInput').value = address.name;
        document.getElementById('streetInput').value = address.streetAddress;
        document.getElementById('cityInput').value = address.city;
        document.getElementById('stateInput').value = address.state;
        document.getElementById('countryInput').value = address.country;
        document.getElementById('pincodeInput').value = address.pincode;
        document.getElementById('phoneInput').value = address.phone;
        
        form.action = `/user/editAddress/${address._id}`;
        form.method = 'PATCH';
    } else {
        // Add mode
        modalTitle.textContent = 'Add New Address';
        form.action = '/user/addAddress';
        form.method = 'POST';
    }

    modal.classList.add('show');
}

function clearErrors() {
    const errorElements = document.querySelectorAll('[id$="Error"]');
    errorElements.forEach(element => {
        element.textContent = '';
    });
}

function closeModal() {
    const modal = document.getElementById('addressModal');
    modal.classList.remove('show');
    
    // Clear form fields
    const form = document.getElementById('addressForm');
    form.reset();
    
    // Clear all error messages
    const errorElements = document.querySelectorAll('[id$="Error"]');
    errorElements.forEach(element => {
        element.textContent = '';
    });
}

function showToast(message, isError = false) {
    const toast = document.createElement('div');
    toast.className = `toast ${isError ? 'bg-red-100 border-red-500' : 'bg-green-100 border-green-500'}`;
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => toast.classList.add('show'), 100);
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}

async function placeOrder(total) {
    const selectedAddress = document.querySelector('[data-address-id].border-red-500');
    if (!selectedAddress) {
        showToast('Please select a delivery address', true);
        return;
    }

    const selectedPayment = document.querySelector('input[name="payment"]:checked');
    if (!selectedPayment) {
        showToast('Please select a payment method', true);
        return;
    }

    try {
        const response = await axios.post('/user/order/creation', {
            addressId: selectedAddress.dataset.addressId,
            total: total,
            paymentType: selectedPayment.value
        });
        
        // Show success message with SweetAlert
        await Swal.fire({
            title: 'Order Placed Successfully!',
            text: 'Thank you for your purchase.',
            icon: 'success',
            confirmButtonText: 'View Orders',
            confirmButtonColor: '#f97316', // orange-500
            allowOutsideClick: false
        });
        
        // Redirect to orders page
        window.location.href = '/user/orders';
        
    } catch (error) {
        console.error('Error placing order:', error);
        const errorMessage = error.response?.data?.message || 'Failed to place order. Please try again.';
        showToast(errorMessage, true);
    }
}

// Form validation functions
function validateName() {
    const input = document.getElementById('nameInput').value.trim();
    const error = document.getElementById('nameError');
    if (!input || !/^[a-zA-Z\s]+$/.test(input)) {
        error.textContent = 'Name should only contain letters';
        error.style.color = 'red';
        return false;
    } else {
        error.textContent = '';
        return true;
    }
}

function validateStreetAddress() {
    const input = document.getElementById('streetInput').value.trim();
    const error = document.getElementById('streetError');
    if (!input || input.length < 5) {
        error.textContent = 'Street address should be at least 5 characters long';
        error.style.color = 'red';
        return false;
    } else {
        error.textContent = '';
        return true;
    }
}

function validateCity() {
    const input = document.getElementById('cityInput').value.trim();
    const error = document.getElementById('cityError');
    if (!input || !/^[a-zA-Z\s]+$/.test(input)) {
        error.textContent = 'City should only contain letters';
        error.style.color = 'red';
        return false;
    } else {
        error.textContent = '';
        return true;
    }
}

function validateState() {
    const input = document.getElementById('stateInput').value.trim();
    const error = document.getElementById('stateError');
    if (!input || !/^[a-zA-Z\s]+$/.test(input)) {
        error.textContent = 'State should only contain letters';
        error.style.color = 'red';
        return false;
    } else if(input[0].toLowerCase() === input[0]) {
        error.textContent = 'First letter should be uppercase';
        error.style.color = 'red';
        return false;
    } else {
        error.textContent = '';
        return true;
    }
}

function validatePincode() {
    const input = document.getElementById('pincodeInput').value.trim();
    const error = document.getElementById('pincodeError');
    if (!input || !/^\d{6}$/.test(input)) {
        error.textContent = 'Pincode should be exactly 6 digits';
        error.style.color = 'red';
        return false;
    } else {
        error.textContent = '';
        return true;
    }
}

function validatePhone() {
    const input = document.getElementById('phoneInput').value.trim();
    const error = document.getElementById('phoneError');
    if (!input || !/^\d{10}$/.test(input)) {
        error.textContent = 'Phone number should be exactly 10 digits';
        error.style.color = 'red';
        return false;
    } else {
        error.textContent = '';
        return true;
    }
}

function validateCountry() {
    const input = document.getElementById('countryInput').value.trim();
    const error = document.getElementById('countryError');
    if (!input || !/^[a-zA-Z\s]+$/.test(input)) {
        error.textContent = 'Country should only contain letters';
        error.style.color = 'red';
        return false;
    } else {
        error.textContent = '';
        return true;
    }
}

// Add input event listeners
document.getElementById('nameInput')?.addEventListener('input', validateName);
document.getElementById('streetInput')?.addEventListener('input', validateStreetAddress);
document.getElementById('cityInput')?.addEventListener('input', validateCity);
document.getElementById('stateInput')?.addEventListener('input', validateState);
document.getElementById('pincodeInput')?.addEventListener('input', validatePincode);
document.getElementById('phoneInput')?.addEventListener('input', validatePhone);
document.getElementById('countryInput')?.addEventListener('input', validateCountry);

// Handle form submission with validation
document.getElementById('addressForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    // Run all validations
    const isNameValid = validateName();
    const isStreetAddressValid = validateStreetAddress();
    const isCityValid = validateCity();
    const isStateValid = validateState();
    const isPincodeValid = validatePincode();
    const isPhoneValid = validatePhone();
    const isCountryValid = validateCountry();

    if (isNameValid && isStreetAddressValid && isCityValid && isStateValid && 
        isPincodeValid && isPhoneValid && isCountryValid) {
        
        try {
            const formData = new FormData(this);
            const data = Object.fromEntries(formData);
            const isEditMode = this.action.includes('editAddress');
            
            let response;
            if (isEditMode) {
                const addressId = this.action.split('/').pop();
                response = await axios.patch(`/user/editAddress/${addressId}`, data);
            } else {
                response = await axios.post('/user/addAddress', data);
            }
            
            if (response.status === 200 || response.status === 201) {
                showToast(isEditMode ? 'Address updated successfully!' : 'Address saved successfully!');
                closeModal();
                setTimeout(() => {
                    location.reload();
                }, 1000);
            }
        } catch (error) {
            console.error("Error saving address:", error);
            showToast('Failed to save address. Please try again.', true);
        }
    } else {
        showToast('Please correct all validation errors before submitting.', true);
    }
});
</script>
